/* The following code was generated by JFlex 1.6.1 */

package analizador_compilador;
import java_cup.runtime.Symbol;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>E:/TEC/2017/II Semestre/Compiladores/Proyecto/2/Analizador_Compilador/src/analizador_compilador/Lexer.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     6,  6,  6,  6,  6,  6,  6,  6,  6,  3,  7,  8,  8,  7,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     3, 32, 22, 28, 23, 37, 38, 15, 26, 27,  5, 33, 31, 18, 17,  4, 
    19, 12, 12, 12, 12, 12, 12, 12,  2,  2, 30, 29, 34, 36, 35, 28, 
     6, 45, 48, 51, 46, 10, 13, 58, 54, 43,  1, 50, 56, 57, 55, 21, 
    61,  1, 41, 53, 44, 47, 62, 40, 20, 60, 59, 28, 16, 28, 39, 14, 
     6, 45, 48, 51, 46, 10, 13, 58, 54, 43,  1, 50, 56, 57, 55, 21, 
    61,  1, 41, 53, 44, 47, 62, 40, 20, 60, 59, 24, 11, 25, 63,  6, 
     6,  6,  6,  6,  6,  8,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6, 23,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 23, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\2"+
    "\1\7\1\2\1\1\1\7\1\10\1\3\1\2\1\1"+
    "\1\11\1\12\1\13\1\14\1\7\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\7\2\2"+
    "\1\1\7\2\1\1\4\2\2\1\2\0\1\4\1\0"+
    "\1\26\1\27\3\2\1\30\2\2\2\0\1\31\1\32"+
    "\1\33\1\1\2\34\1\0\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\3\2\1\45\1\0\1\45"+
    "\4\2\1\46\5\2\4\0\6\2\1\47\1\0\1\47"+
    "\1\0\2\2\1\0\1\2\1\50\1\2\1\51\1\0"+
    "\1\52\1\0\1\2\1\0\4\2\2\53\3\2\1\0"+
    "\1\2\1\0\3\2\1\0\2\2\6\0\7\2\1\0"+
    "\2\2\1\4\1\2\1\54\2\55\1\2\1\56\1\0"+
    "\1\2\1\0\2\2\1\57\1\0\3\2\1\0\1\2"+
    "\1\0\3\2\1\0\1\2\2\60\1\61\6\0\6\2"+
    "\1\62\2\63\1\2\2\64\2\65\1\2\1\0\3\2"+
    "\1\54\2\66\1\0\1\2\2\67\5\0\1\70\4\2"+
    "\1\70\1\2\1\71\1\0\2\2\1\0\1\2\2\72"+
    "\1\0\1\2\1\0\1\2\1\73\1\0\1\2\1\0"+
    "\1\2\2\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\100\0\u0100\0\u0140\0\u0180"+
    "\0\u01c0\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380"+
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\100\0\100"+
    "\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0500"+
    "\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740"+
    "\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940"+
    "\0\u0980\0\u09c0\0\u0280\0\u0a00\0\u0a40\0\100\0\100\0\u0a80"+
    "\0\u0ac0\0\u0b00\0\100\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40"+
    "\0\100\0\100\0\u0c80\0\u0cc0\0\u0340\0\u0380\0\100\0\100"+
    "\0\100\0\100\0\100\0\100\0\100\0\100\0\u0d00\0\u0d40"+
    "\0\u0d80\0\100\0\u0dc0\0\200\0\u0e00\0\u0e40\0\u0e80\0\u0ec0"+
    "\0\200\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080"+
    "\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280"+
    "\0\u12c0\0\u1300\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440"+
    "\0\200\0\u1480\0\100\0\u14c0\0\u0c80\0\u1500\0\u1540\0\u1580"+
    "\0\u15c0\0\u1600\0\u1640\0\u1680\0\100\0\200\0\u16c0\0\u1700"+
    "\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900"+
    "\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00"+
    "\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00"+
    "\0\u1d40\0\u1d80\0\u0a40\0\u1dc0\0\200\0\100\0\200\0\u1e00"+
    "\0\100\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\200\0\u1f80"+
    "\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180"+
    "\0\u21c0\0\u2200\0\u2240\0\100\0\200\0\200\0\u2280\0\u22c0"+
    "\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480\0\u24c0"+
    "\0\u2500\0\u2540\0\200\0\100\0\200\0\u2580\0\100\0\200"+
    "\0\100\0\200\0\u25c0\0\u2600\0\u2640\0\u2680\0\u26c0\0\100"+
    "\0\100\0\200\0\u2700\0\u2740\0\100\0\200\0\u2780\0\u27c0"+
    "\0\u2800\0\u2840\0\u2880\0\100\0\u28c0\0\u2900\0\u2940\0\u2980"+
    "\0\200\0\u29c0\0\200\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00"+
    "\0\100\0\200\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\200\0\u2c40"+
    "\0\u2c80\0\u2cc0\0\u2d00\0\100\0\200";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\5"+
    "\2\0\1\10\1\11\1\4\1\12\1\3\1\13\1\2"+
    "\1\14\1\15\1\16\1\3\1\17\1\20\1\2\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\2\1\3\1\52\1\53\1\54\2\3\1\55\1\3"+
    "\1\56\3\3\1\57\1\25\101\0\2\3\7\0\1\3"+
    "\1\0\3\3\4\0\3\3\22\0\2\3\1\0\6\3"+
    "\1\0\2\3\1\0\12\3\2\0\1\60\1\4\7\0"+
    "\1\61\1\62\1\4\2\60\2\0\1\63\1\0\1\4"+
    "\2\60\22\0\2\60\1\0\6\60\1\0\2\60\1\0"+
    "\12\60\5\0\1\64\1\65\36\0\1\66\77\0\1\67"+
    "\34\0\2\3\7\0\1\3\1\0\3\3\4\0\1\3"+
    "\1\70\1\3\22\0\2\3\1\0\6\3\1\0\2\3"+
    "\1\0\2\3\1\71\1\72\6\3\14\0\1\73\30\0"+
    "\1\25\34\0\2\3\7\0\1\3\1\0\3\3\4\0"+
    "\2\3\1\74\22\0\2\3\1\0\6\3\1\0\2\3"+
    "\1\0\3\3\1\75\6\3\2\0\1\76\10\0\1\76"+
    "\2\0\1\76\2\0\1\77\3\0\2\76\22\0\2\76"+
    "\1\0\6\76\1\0\2\76\1\0\12\76\3\0\1\100"+
    "\11\0\1\100\6\0\1\100\76\0\1\101\20\0\1\25"+
    "\1\102\34\0\1\60\1\4\7\0\1\61\1\62\1\4"+
    "\2\60\2\0\1\63\1\0\1\4\1\103\1\60\22\0"+
    "\2\60\1\0\6\60\1\0\2\60\1\0\12\60\2\0"+
    "\2\3\7\0\1\3\1\104\1\105\2\3\4\0\1\105"+
    "\2\3\22\0\2\3\1\0\6\3\1\0\2\3\1\0"+
    "\12\3\2\0\5\106\1\0\1\106\2\0\14\106\1\107"+
    "\23\106\1\0\6\106\1\0\2\106\1\0\12\106\45\0"+
    "\1\110\74\0\1\111\2\0\1\112\75\0\1\40\1\0"+
    "\1\113\76\0\1\40\1\114\77\0\1\115\77\0\1\25"+
    "\77\0\1\25\1\0\1\116\32\0\2\3\7\0\1\3"+
    "\1\0\3\3\4\0\3\3\22\0\1\3\1\117\1\0"+
    "\6\3\1\0\2\3\1\0\1\3\1\120\10\3\2\0"+
    "\2\3\7\0\1\121\1\0\3\3\4\0\3\3\22\0"+
    "\2\3\1\0\6\3\1\0\2\3\1\0\12\3\16\0"+
    "\1\122\51\0\1\123\11\0\2\3\7\0\1\3\1\0"+
    "\1\3\1\124\1\3\4\0\3\3\22\0\2\3\1\0"+
    "\6\3\1\0\2\3\1\0\2\3\1\125\7\3\2\0"+
    "\2\3\7\0\1\3\1\0\3\3\4\0\3\3\22\0"+
    "\2\3\1\0\6\3\1\0\2\3\1\0\7\3\1\126"+
    "\2\3\2\0\2\3\7\0\1\3\1\0\3\3\4\0"+
    "\3\3\22\0\2\3\1\0\4\3\1\127\1\3\1\0"+
    "\2\3\1\0\12\3\2\0\2\3\7\0\1\130\1\0"+
    "\3\3\4\0\2\3\1\131\22\0\2\3\1\0\6\3"+
    "\1\0\2\3\1\0\12\3\2\0\2\3\7\0\1\3"+
    "\1\0\3\3\4\0\3\3\22\0\2\3\1\0\6\3"+
    "\1\0\2\3\1\0\2\3\1\132\7\3\2\0\2\3"+
    "\7\0\1\3\1\0\3\3\4\0\3\3\22\0\1\3"+
    "\1\133\1\0\6\3\1\0\2\3\1\0\12\3\2\0"+
    "\2\3\7\0\1\3\1\0\3\3\4\0\2\3\1\134"+
    "\22\0\2\3\1\0\2\3\1\135\3\3\1\0\2\3"+
    "\1\0\1\3\1\136\10\3\51\0\1\137\1\0\2\140"+
    "\1\141\11\0\1\142\12\0\2\3\7\0\1\3\1\0"+
    "\3\3\4\0\3\3\22\0\1\143\1\3\1\140\1\144"+
    "\1\145\4\3\1\0\2\3\1\0\1\3\1\146\10\3"+
    "\2\0\2\3\7\0\1\3\1\0\3\3\4\0\2\3"+
    "\1\147\22\0\2\3\1\0\6\3\1\0\2\3\1\0"+
    "\12\3\2\0\2\3\7\0\1\3\1\0\3\3\4\0"+
    "\2\3\1\127\22\0\2\3\1\0\6\3\1\0\2\3"+
    "\1\0\12\3\2\0\2\3\7\0\1\3\1\0\3\3"+
    "\4\0\2\3\1\150\22\0\2\3\1\0\6\3\1\0"+
    "\2\3\1\0\12\3\2\0\2\60\7\0\1\60\1\0"+
    "\3\60\4\0\3\60\22\0\2\60\1\0\6\60\1\0"+
    "\2\60\1\0\12\60\2\0\1\60\1\151\7\0\1\60"+
    "\1\0\1\151\2\60\3\0\1\152\1\151\2\60\22\0"+
    "\2\60\1\0\6\60\1\0\2\60\1\0\12\60\3\0"+
    "\1\153\11\0\1\153\5\0\1\152\1\153\54\0\7\64"+
    "\3\0\66\64\1\0\4\65\1\154\3\65\1\0\40\65"+
    "\1\0\6\65\1\0\2\65\1\0\13\65\1\0\2\3"+
    "\7\0\1\3\1\0\3\3\4\0\3\3\22\0\2\3"+
    "\1\0\1\3\1\155\4\3\1\0\2\3\1\0\12\3"+
    "\2\0\2\3\7\0\1\3\1\0\3\3\4\0\3\3"+
    "\22\0\2\3\1\0\4\3\1\156\1\3\1\0\2\3"+
    "\1\0\12\3\2\0\2\3\7\0\1\3\1\0\3\3"+
    "\4\0\3\3\22\0\2\3\1\0\6\3\1\0\2\3"+
    "\1\157\1\160\11\3\2\0\2\3\7\0\1\3\1\0"+
    "\3\3\4\0\3\3\22\0\1\3\1\161\1\0\6\3"+
    "\1\0\2\3\1\0\12\3\2\0\2\3\7\0\1\3"+
    "\1\0\3\3\4\0\2\3\1\162\22\0\2\3\1\0"+
    "\6\3\1\0\2\3\1\0\12\3\20\0\1\163\62\0"+
    "\1\164\11\0\1\164\6\0\1\164\56\0\1\100\7\0"+
    "\2\62\1\100\6\0\1\100\55\0\1\60\1\165\7\0"+
    "\1\165\1\0\2\165\1\60\4\0\1\165\2\60\22\0"+
    "\2\60\1\0\2\60\2\165\1\60\1\165\1\0\1\60"+
    "\1\165\1\0\12\60\14\0\2\104\6\0\1\104\55\0"+
    "\2\3\7\0\1\3\1\0\3\3\4\0\3\3\22\0"+
    "\2\3\1\166\1\167\5\3\1\0\2\3\1\0\12\3"+
    "\2\0\2\3\7\0\1\3\1\0\3\3\4\0\3\3"+
    "\22\0\2\3\1\170\1\171\5\3\1\0\2\3\1\0"+
    "\12\3\2\0\2\3\7\0\1\3\1\0\3\3\4\0"+
    "\3\3\22\0\2\3\1\0\1\3\1\172\1\173\3\3"+
    "\1\0\2\3\1\0\5\3\1\174\4\3\55\0\1\175"+
    "\24\0\2\3\7\0\1\3\1\0\3\3\4\0\3\3"+
    "\22\0\2\3\1\0\1\3\1\176\4\3\1\0\2\3"+
    "\1\0\12\3\2\0\2\3\7\0\1\3\1\0\3\3"+
    "\4\0\3\3\22\0\2\3\1\0\6\3\1\0\2\3"+
    "\1\0\10\3\1\177\1\3\2\0\2\3\7\0\1\3"+
    "\1\0\3\3\4\0\3\3\22\0\2\3\1\0\1\3"+
    "\1\200\4\3\1\0\2\3\1\0\12\3\2\0\2\3"+
    "\7\0\1\3\1\0\1\3\1\201\1\3\4\0\3\3"+
    "\22\0\2\3\1\0\6\3\1\0\2\3\1\0\12\3"+
    "\2\0\2\3\7\0\1\3\1\0\3\3\4\0\3\3"+
    "\22\0\2\3\1\202\1\203\5\3\1\0\2\3\1\204"+
    "\1\205\11\3\2\0\2\3\7\0\1\206\1\0\3\3"+
    "\4\0\3\3\22\0\2\3\1\0\6\3\1\0\2\3"+
    "\1\0\12\3\2\0\2\3\7\0\1\3\1\0\3\3"+
    "\4\0\3\3\22\0\2\3\1\0\6\3\1\0\2\3"+
    "\1\0\2\3\1\207\7\3\2\0\2\3\7\0\1\3"+
    "\1\0\3\3\4\0\3\3\22\0\2\3\1\0\6\3"+
    "\1\0\2\3\1\210\1\211\11\3\2\0\2\3\7\0"+
    "\1\3\1\0\3\3\4\0\3\3\22\0\2\3\1\0"+
    "\2\3\1\212\3\3\1\0\2\3\1\0\12\3\53\0"+
    "\2\213\116\0\1\214\1\215\55\0\1\216\3\0\1\217"+
    "\47\0\1\220\53\0\2\3\7\0\1\3\1\0\3\3"+
    "\4\0\3\3\22\0\2\3\1\213\1\221\5\3\1\0"+
    "\2\3\1\0\12\3\2\0\2\3\7\0\1\3\1\0"+
    "\3\3\4\0\3\3\22\0\2\3\1\0\6\3\1\0"+
    "\2\3\1\0\5\3\1\222\1\223\3\3\2\0\2\3"+
    "\7\0\1\3\1\0\3\3\4\0\3\3\22\0\1\3"+
    "\1\224\1\0\2\3\1\225\3\3\1\0\2\3\1\0"+
    "\12\3\2\0\2\3\7\0\1\3\1\0\3\3\4\0"+
    "\2\3\1\226\22\0\2\3\1\0\6\3\1\0\2\3"+
    "\1\0\12\3\2\0\2\3\7\0\1\3\1\0\3\3"+
    "\4\0\3\3\22\0\2\3\1\0\6\3\1\0\2\3"+
    "\1\0\2\3\1\227\7\3\2\0\2\3\7\0\1\3"+
    "\1\0\3\3\4\0\3\3\22\0\2\3\1\230\1\231"+
    "\5\3\1\0\2\3\1\0\3\3\1\232\6\3\2\0"+
    "\1\60\1\151\7\0\1\60\1\0\1\151\2\60\4\0"+
    "\1\151\2\60\22\0\2\60\1\0\6\60\1\0\2\60"+
    "\1\0\12\60\3\0\1\153\11\0\1\153\6\0\1\153"+
    "\55\0\3\65\1\233\1\154\3\65\1\0\40\65\1\0"+
    "\6\65\1\0\2\65\1\0\13\65\1\0\2\3\7\0"+
    "\1\234\1\0\3\3\4\0\3\3\22\0\2\3\1\0"+
    "\6\3\1\0\2\3\1\0\12\3\2\0\2\3\7\0"+
    "\1\3\1\0\3\3\4\0\3\3\22\0\2\3\1\0"+
    "\6\3\1\0\2\3\1\0\4\3\1\235\5\3\13\0"+
    "\1\236\66\0\2\3\7\0\1\237\1\0\3\3\4\0"+
    "\3\3\22\0\2\3\1\0\6\3\1\0\2\3\1\0"+
    "\12\3\2\0\2\3\7\0\1\3\1\0\3\3\4\0"+
    "\3\3\22\0\2\3\1\0\2\3\1\240\3\3\1\0"+
    "\2\3\1\0\12\3\3\0\1\164\11\0\1\164\2\0"+
    "\1\241\3\0\1\164\130\0\1\242\24\0\2\3\7\0"+
    "\1\3\1\0\3\3\4\0\3\3\22\0\2\3\1\0"+
    "\1\3\1\243\4\3\1\0\2\3\1\0\12\3\71\0"+
    "\1\244\10\0\2\3\7\0\1\3\1\0\3\3\4\0"+
    "\3\3\22\0\2\3\1\0\6\3\1\0\2\3\1\0"+
    "\3\3\1\245\6\3\2\0\2\3\7\0\1\3\1\0"+
    "\3\3\4\0\3\3\22\0\2\3\1\0\4\3\1\246"+
    "\1\3\1\0\2\3\1\0\12\3\2\0\2\3\7\0"+
    "\1\3\1\0\3\3\4\0\3\3\22\0\2\3\1\0"+
    "\3\3\1\247\2\3\1\0\2\3\1\0\12\3\2\0"+
    "\2\3\7\0\1\3\1\0\3\3\4\0\3\3\22\0"+
    "\2\3\1\250\1\251\5\3\1\0\2\3\1\0\12\3"+
    "\2\0\2\3\7\0\1\252\1\0\3\3\4\0\3\3"+
    "\22\0\2\3\1\0\6\3\1\0\2\3\1\0\12\3"+
    "\2\0\2\3\7\0\1\3\1\0\3\3\4\0\2\3"+
    "\1\235\22\0\2\3\1\0\6\3\1\0\2\3\1\0"+
    "\12\3\2\0\2\3\7\0\1\3\1\0\3\3\4\0"+
    "\3\3\22\0\2\3\1\0\2\3\1\253\3\3\1\0"+
    "\2\3\1\0\12\3\26\0\1\254\53\0\2\3\7\0"+
    "\1\3\1\0\3\3\4\0\2\3\1\255\22\0\2\3"+
    "\1\0\6\3\1\0\2\3\1\0\12\3\53\0\2\256"+
    "\25\0\2\3\7\0\1\3\1\0\3\3\4\0\3\3"+
    "\22\0\2\3\1\256\1\257\5\3\1\0\2\3\1\0"+
    "\12\3\2\0\2\3\7\0\1\3\1\0\3\3\4\0"+
    "\3\3\22\0\2\3\1\0\2\3\1\260\3\3\1\0"+
    "\2\3\1\0\12\3\2\0\2\3\7\0\1\3\1\0"+
    "\3\3\4\0\3\3\22\0\2\3\1\0\1\3\1\261"+
    "\4\3\1\0\2\3\1\262\1\263\11\3\13\0\1\264"+
    "\66\0\2\3\7\0\1\265\1\0\3\3\4\0\3\3"+
    "\22\0\2\3\1\0\6\3\1\0\2\3\1\0\12\3"+
    "\2\0\2\3\7\0\1\3\1\0\3\3\4\0\3\3"+
    "\22\0\1\3\1\266\1\0\6\3\1\0\2\3\1\0"+
    "\12\3\55\0\1\267\112\0\1\270\22\0\1\271\144\0"+
    "\1\272\74\0\1\273\74\0\1\274\27\0\2\3\7\0"+
    "\1\3\1\0\3\3\4\0\3\3\22\0\2\3\1\0"+
    "\1\3\1\275\4\3\1\0\2\3\1\0\12\3\2\0"+
    "\2\3\7\0\1\3\1\0\3\3\4\0\3\3\22\0"+
    "\2\3\1\0\6\3\1\0\2\3\1\0\2\3\1\276"+
    "\7\3\2\0\2\3\7\0\1\277\1\0\3\3\4\0"+
    "\3\3\22\0\2\3\1\0\6\3\1\0\2\3\1\0"+
    "\12\3\2\0\2\3\7\0\1\3\1\0\3\3\4\0"+
    "\3\3\22\0\2\3\1\0\4\3\1\300\1\3\1\0"+
    "\2\3\1\0\12\3\2\0\2\3\7\0\1\3\1\0"+
    "\3\3\4\0\3\3\22\0\2\3\1\0\1\3\1\301"+
    "\4\3\1\0\2\3\1\0\12\3\2\0\2\3\7\0"+
    "\1\3\1\0\3\3\4\0\3\3\22\0\1\3\1\302"+
    "\1\0\6\3\1\0\2\3\1\0\12\3\2\0\2\3"+
    "\7\0\1\3\1\0\3\3\4\0\3\3\22\0\2\3"+
    "\1\0\6\3\1\0\2\3\1\0\5\3\1\303\4\3"+
    "\57\0\1\304\22\0\2\3\7\0\1\3\1\0\3\3"+
    "\4\0\3\3\22\0\2\3\1\0\3\3\1\305\2\3"+
    "\1\0\2\3\1\0\12\3\2\0\2\3\7\0\1\3"+
    "\1\0\3\3\4\0\3\3\22\0\2\3\1\0\2\3"+
    "\1\306\3\3\1\0\2\3\1\0\12\3\2\0\2\3"+
    "\7\0\1\3\1\0\3\3\4\0\3\3\22\0\1\3"+
    "\1\255\1\0\6\3\1\0\2\3\1\0\12\3\2\0"+
    "\2\3\7\0\1\3\1\0\3\3\4\0\3\3\22\0"+
    "\2\3\1\0\1\3\1\235\4\3\1\0\2\3\1\0"+
    "\12\3\13\0\1\307\66\0\2\3\7\0\1\310\1\0"+
    "\3\3\4\0\3\3\22\0\2\3\1\0\6\3\1\0"+
    "\2\3\1\0\12\3\13\0\1\311\66\0\2\3\7\0"+
    "\1\312\1\0\3\3\4\0\3\3\22\0\2\3\1\0"+
    "\6\3\1\0\2\3\1\0\12\3\2\0\2\3\7\0"+
    "\1\3\1\0\3\3\4\0\3\3\22\0\1\3\1\313"+
    "\1\0\6\3\1\0\2\3\1\0\12\3\65\0\2\314"+
    "\13\0\2\3\7\0\1\3\1\0\3\3\4\0\3\3"+
    "\22\0\2\3\1\0\6\3\1\0\2\3\1\314\1\315"+
    "\11\3\2\0\2\3\7\0\1\3\1\0\3\3\4\0"+
    "\3\3\22\0\2\3\1\0\3\3\1\316\2\3\1\0"+
    "\2\3\1\0\12\3\2\0\2\3\7\0\1\3\1\0"+
    "\3\3\4\0\3\3\22\0\2\3\1\0\4\3\1\317"+
    "\1\3\1\0\2\3\1\0\12\3\70\0\1\320\11\0"+
    "\2\3\7\0\1\3\1\0\3\3\4\0\3\3\22\0"+
    "\2\3\1\0\6\3\1\0\2\3\1\0\2\3\1\235"+
    "\7\3\73\0\1\214\6\0\2\3\7\0\1\3\1\0"+
    "\3\3\4\0\3\3\22\0\2\3\1\0\6\3\1\0"+
    "\2\3\1\0\5\3\1\222\4\3\2\0\2\3\7\0"+
    "\1\3\1\0\3\3\4\0\3\3\22\0\2\3\1\0"+
    "\6\3\1\321\1\322\1\3\1\0\12\3\2\0\2\3"+
    "\7\0\1\3\1\0\3\3\4\0\3\3\22\0\2\3"+
    "\1\323\1\324\5\3\1\0\2\3\1\0\12\3\55\0"+
    "\1\325\24\0\2\3\7\0\1\3\1\0\3\3\4\0"+
    "\3\3\22\0\2\3\1\0\1\3\1\326\4\3\1\0"+
    "\2\3\1\0\12\3\64\0\1\327\26\0\1\330\112\0"+
    "\1\331\135\0\1\332\66\0\2\333\100\0\1\334\24\0"+
    "\2\3\7\0\1\3\1\0\3\3\4\0\3\3\22\0"+
    "\2\3\1\0\6\3\1\0\1\3\1\335\1\0\12\3"+
    "\2\0\2\3\7\0\1\336\1\0\3\3\4\0\3\3"+
    "\22\0\2\3\1\0\6\3\1\0\2\3\1\0\12\3"+
    "\2\0\2\3\7\0\1\3\1\0\3\3\4\0\2\3"+
    "\1\337\22\0\2\3\1\0\6\3\1\0\2\3\1\0"+
    "\12\3\2\0\2\3\7\0\1\3\1\0\3\3\4\0"+
    "\3\3\22\0\2\3\1\0\6\3\1\0\1\3\1\240"+
    "\1\0\12\3\2\0\2\3\7\0\1\3\1\0\3\3"+
    "\4\0\3\3\22\0\2\3\1\333\1\340\5\3\1\0"+
    "\2\3\1\0\12\3\2\0\2\3\7\0\1\3\1\0"+
    "\3\3\4\0\3\3\22\0\2\3\1\0\1\3\1\341"+
    "\4\3\1\0\2\3\1\0\12\3\2\0\2\3\7\0"+
    "\1\3\1\0\3\3\4\0\3\3\22\0\2\3\1\0"+
    "\1\3\1\342\4\3\1\0\2\3\1\0\12\3\2\0"+
    "\2\3\7\0\1\3\1\0\3\3\4\0\3\3\22\0"+
    "\2\3\1\0\6\3\1\0\2\3\1\0\2\3\1\343"+
    "\7\3\55\0\1\344\24\0\2\3\7\0\1\3\1\0"+
    "\3\3\4\0\3\3\22\0\2\3\1\0\1\3\1\345"+
    "\4\3\1\0\2\3\1\0\12\3\2\0\2\3\7\0"+
    "\1\337\1\0\3\3\4\0\3\3\22\0\2\3\1\0"+
    "\6\3\1\0\2\3\1\0\12\3\2\0\2\3\7\0"+
    "\1\3\1\0\3\3\4\0\3\3\22\0\2\3\1\0"+
    "\6\3\1\0\2\3\1\0\3\3\1\346\6\3\70\0"+
    "\1\347\11\0\2\3\7\0\1\3\1\0\3\3\4\0"+
    "\3\3\22\0\2\3\1\0\6\3\1\0\2\3\1\0"+
    "\2\3\1\350\7\3\67\0\1\351\67\0\1\320\36\0"+
    "\1\320\136\0\1\320\106\0\1\320\15\0\2\3\7\0"+
    "\1\3\1\0\3\3\4\0\3\3\22\0\2\3\1\0"+
    "\6\3\1\0\2\3\1\0\1\3\1\352\10\3\2\0"+
    "\2\3\7\0\1\3\1\0\3\3\4\0\3\3\22\0"+
    "\2\3\1\0\3\3\1\235\2\3\1\0\2\3\1\0"+
    "\12\3\2\0\2\3\7\0\1\3\1\0\1\3\1\235"+
    "\1\3\4\0\3\3\22\0\2\3\1\0\6\3\1\0"+
    "\2\3\1\0\12\3\2\0\2\3\7\0\1\3\1\0"+
    "\3\3\4\0\3\3\22\0\2\3\1\0\6\3\1\0"+
    "\1\3\1\235\1\0\12\3\2\0\2\3\7\0\1\3"+
    "\1\0\3\3\4\0\3\3\22\0\2\3\1\353\1\354"+
    "\5\3\1\0\2\3\1\0\12\3\13\0\1\355\66\0"+
    "\2\3\7\0\1\356\1\0\3\3\4\0\3\3\22\0"+
    "\2\3\1\0\6\3\1\0\2\3\1\0\12\3\2\0"+
    "\2\3\7\0\1\3\1\0\3\3\4\0\3\3\22\0"+
    "\2\3\1\0\1\3\1\357\4\3\1\0\2\3\1\0"+
    "\12\3\60\0\1\360\21\0\2\3\7\0\1\3\1\0"+
    "\3\3\4\0\3\3\22\0\2\3\1\0\4\3\1\361"+
    "\1\3\1\0\2\3\1\0\12\3\71\0\1\362\10\0"+
    "\2\3\7\0\1\3\1\0\3\3\4\0\3\3\22\0"+
    "\2\3\1\0\6\3\1\0\2\3\1\0\3\3\1\363"+
    "\6\3\52\0\1\320\27\0\2\3\7\0\1\3\1\0"+
    "\3\3\4\0\3\3\22\0\1\3\1\235\1\0\6\3"+
    "\1\0\2\3\1\0\12\3\13\0\1\364\66\0\2\3"+
    "\7\0\1\365\1\0\3\3\4\0\3\3\22\0\2\3"+
    "\1\0\6\3\1\0\2\3\1\0\12\3\13\0\1\320"+
    "\66\0\2\3\7\0\1\235\1\0\3\3\4\0\3\3"+
    "\22\0\2\3\1\0\6\3\1\0\2\3\1\0\12\3"+
    "\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11584];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\13\1\10\11\31\1\2\0"+
    "\1\1\1\0\2\11\3\1\1\11\2\1\2\0\1\1"+
    "\2\11\3\1\1\0\10\11\3\1\1\11\1\0\13\1"+
    "\4\0\7\1\1\0\1\1\1\0\2\1\1\0\3\1"+
    "\1\11\1\0\1\1\1\0\1\1\1\0\4\1\1\11"+
    "\4\1\1\0\1\1\1\0\3\1\1\0\2\1\6\0"+
    "\7\1\1\0\5\1\1\11\2\1\1\11\1\0\1\1"+
    "\1\0\3\1\1\0\3\1\1\0\1\1\1\0\3\1"+
    "\1\0\1\1\1\11\2\1\6\0\7\1\1\11\2\1"+
    "\1\11\1\1\1\11\2\1\1\0\3\1\2\11\1\1"+
    "\1\0\1\1\1\11\1\1\5\0\1\11\7\1\1\0"+
    "\2\1\1\0\1\1\1\11\1\1\1\0\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[245];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    private Lista_Tokens lista_Tokens = new Lista_Tokens();
    
    public Lista_Tokens getLista_Tokens(){
        return this.lista_Tokens;
    }

    public void crearToken(String tipo, String lexema, int linea, int columna){
        Token actual = new Token(tipo,lexema,linea,columna);
        revisarToken(actual); 
    }
    
    public void revisarToken(Token token){
        
        if (lista_Tokens.estaToken(token.getLexema())) {
            if (lista_Tokens.estaLineaToken(token.getLinea()+1, token.getLexema())) {
                lista_Tokens.aumentarCantidadLinea(token.getLinea()+1, token.getLexema());
            } else {
                lista_Tokens.crearNuevaLinea(token.getLinea()+1, token.getLexema());
            }
        } else {
            lista_Tokens.agregarNuevoToken(token);
            lista_Tokens.crearNuevaLinea(token.getLinea()+1, token.getLexema());
        }
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {   return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { crearToken("Error",yytext(),yyline + 1,yycolumn);
            }
          case 61: break;
          case 2: 
            { crearToken("Identificador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.IDENTIFICADOR,yycolumn,yyline + 1,yytext());
            }
          case 62: break;
          case 3: 
            { crearToken("Literal",yytext(),yyline + 1,yycolumn); return new Symbol(sym.ENTERO,yycolumn,yyline + 1,yytext());
            }
          case 63: break;
          case 4: 
            { /*Ignore*/
            }
          case 64: break;
          case 5: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.DIV,yycolumn,yyline + 1,yytext());
            }
          case 65: break;
          case 6: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.MUL,yycolumn,yyline + 1,yytext());
            }
          case 66: break;
          case 7: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn);
            }
          case 67: break;
          case 8: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.MEN,yycolumn,yyline + 1,yytext());
            }
          case 68: break;
          case 9: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.LLAI,yycolumn,yyline + 1,yytext());
            }
          case 69: break;
          case 10: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.LLAD,yycolumn,yyline + 1,yytext());
            }
          case 70: break;
          case 11: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.PARI,yycolumn,yyline + 1,yytext());
            }
          case 71: break;
          case 12: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.PARD,yycolumn,yyline + 1,yytext());
            }
          case 72: break;
          case 13: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.PCOMA,yycolumn,yyline + 1,yytext());
            }
          case 73: break;
          case 14: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.DP,yycolumn,yyline + 1,yytext());
            }
          case 74: break;
          case 15: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.COMA,yycolumn,yyline + 1,yytext());
            }
          case 75: break;
          case 16: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.NOT,yycolumn,yyline + 1,yytext());
            }
          case 76: break;
          case 17: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.MAS,yycolumn,yyline + 1,yytext());
            }
          case 77: break;
          case 18: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.MAY,yycolumn,yyline + 1,yytext());
            }
          case 78: break;
          case 19: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.MENO,yycolumn,yyline + 1,yytext());
            }
          case 79: break;
          case 20: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.IG,yycolumn,yyline + 1,yytext());
            }
          case 80: break;
          case 21: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.MOD,yycolumn,yyline + 1,yytext());
            }
          case 81: break;
          case 22: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.DIVIG,yycolumn,yyline + 1,yytext());
            }
          case 82: break;
          case 23: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.MULIG,yycolumn,yyline + 1,yytext());
            }
          case 83: break;
          case 24: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.OR,yycolumn,yyline + 1,yytext());
            }
          case 84: break;
          case 25: 
            { crearToken("Literal",yytext(),yyline + 1,yycolumn); return new Symbol(sym.DECIMAL,yycolumn,yyline + 1,yytext());
            }
          case 85: break;
          case 26: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.MENMEN,yycolumn,yyline + 1,yytext());
            }
          case 86: break;
          case 27: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.MENIG,yycolumn,yyline + 1,yytext());
            }
          case 87: break;
          case 28: 
            { crearToken("Literal",yytext(),yyline + 1,yycolumn); return new Symbol(sym.OCTAL,yycolumn,yyline + 1,yytext());
            }
          case 88: break;
          case 29: 
            { crearToken("Literal",yytext(),yyline + 1,yycolumn); return new Symbol(sym.STRING,yycolumn,yyline + 1,yytext());
            }
          case 89: break;
          case 30: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.DIF,yycolumn,yyline + 1,yytext());
            }
          case 90: break;
          case 31: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.MASMAS,yycolumn,yyline + 1,yytext());
            }
          case 91: break;
          case 32: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.MASIG,yycolumn,yyline + 1,yytext());
            }
          case 92: break;
          case 33: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.MAYIG,yycolumn,yyline + 1,yytext());
            }
          case 93: break;
          case 34: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.MENOIG,yycolumn,yyline + 1,yytext());
            }
          case 94: break;
          case 35: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.IGIG,yycolumn,yyline + 1,yytext());
            }
          case 95: break;
          case 36: 
            { crearToken("Operador",yytext(),yyline + 1,yycolumn); return new Symbol(sym.AND,yycolumn,yyline + 1,yytext());
            }
          case 96: break;
          case 37: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.IF,yycolumn,yyline + 1,yytext());
            }
          case 97: break;
          case 38: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.DO,yycolumn,yyline + 1,yytext());
            }
          case 98: break;
          case 39: 
            { crearToken("Literal",yytext(),yyline + 1,yycolumn); return new Symbol(sym.CIENTIFICO,yycolumn,yyline + 1,yytext());
            }
          case 99: break;
          case 40: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.FOR,yycolumn,yyline + 1,yytext());
            }
          case 100: break;
          case 41: 
            { crearToken("Literal",yytext(),yyline + 1,yycolumn); return new Symbol(sym.CARACTER,yycolumn,yyline + 1,yytext());
            }
          case 101: break;
          case 42: 
            { crearToken("Literal",yytext(),yyline + 1,yycolumn); return new Symbol(sym.HEXA,yycolumn,yyline + 1,yytext());
            }
          case 102: break;
          case 43: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.INT,yycolumn,yyline + 1,yytext());
            }
          case 103: break;
          case 44: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn);
            }
          case 104: break;
          case 45: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.ELSE,yycolumn,yyline + 1,yytext());
            }
          case 105: break;
          case 46: 
            { crearToken("Literal",yytext(),yyline + 1,yycolumn); return new Symbol(sym.CARACTERN,yycolumn,yyline + 1,yytext());
            }
          case 106: break;
          case 47: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.READ,yycolumn,yyline + 1,yytext());
            }
          case 107: break;
          case 48: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.CASE,yycolumn,yyline + 1,yytext());
            }
          case 108: break;
          case 49: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.CHAR,yycolumn,yyline + 1,yytext());
            }
          case 109: break;
          case 50: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.LONG,yycolumn,yyline + 1,yytext());
            }
          case 110: break;
          case 51: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.VOID,yycolumn,yyline + 1,yytext());
            }
          case 111: break;
          case 52: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.WRITE,yycolumn,yyline + 1,yytext());
            }
          case 112: break;
          case 53: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.WHILE,yycolumn,yyline + 1,yytext());
            }
          case 113: break;
          case 54: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.BREAK,yycolumn,yyline + 1,yytext());
            }
          case 114: break;
          case 55: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.CONST,yycolumn,yyline + 1,yytext());
            }
          case 115: break;
          case 56: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.SHORT,yycolumn,yyline + 1,yytext());
            }
          case 116: break;
          case 57: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.RETURN,yycolumn,yyline + 1,yytext());
            }
          case 117: break;
          case 58: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.SWITCH,yycolumn,yyline + 1,yytext());
            }
          case 118: break;
          case 59: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.DEFAULT,yycolumn,yyline + 1,yytext());
            }
          case 119: break;
          case 60: 
            { crearToken("Palabra Reservada",yytext(),yyline + 1,yycolumn); return new Symbol(sym.CONTINUE,yycolumn,yyline + 1,yytext());
            }
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
