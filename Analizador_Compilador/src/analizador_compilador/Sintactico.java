
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizador_compilador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\243\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\004\000\002\004\003" +
    "\000\002\004\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\006\004\000\002\006\004\000\002\007\005" +
    "\000\002\010\003\000\002\046\002\000\002\010\006\000" +
    "\002\010\003\000\002\047\002\000\002\011\007\000\002" +
    "\050\002\000\002\011\007\000\002\051\002\000\002\011" +
    "\007\000\002\052\002\000\002\011\007\000\002\053\002" +
    "\000\002\011\007\000\002\054\002\000\002\011\007\000" +
    "\002\055\002\000\002\011\007\000\002\056\002\000\002" +
    "\011\007\000\002\057\002\000\002\011\007\000\002\060" +
    "\002\000\002\011\007\000\002\012\004\000\002\012\005" +
    "\000\002\012\005\000\002\013\003\000\002\013\005\000" +
    "\002\014\004\000\002\014\004\000\002\014\004\000\002" +
    "\014\004\000\002\015\004\000\002\015\006\000\002\061" +
    "\002\000\002\015\006\000\002\015\005\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\042\003\000\002\042\003" +
    "\000\002\021\003\000\002\021\003\000\002\022\004\000" +
    "\002\023\004\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\025\006" +
    "\000\002\025\005\000\002\062\002\000\002\025\007\000" +
    "\002\026\003\000\002\026\005\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\041\003\000\002\041" +
    "\003\000\002\041\003\000\002\041\003\000\002\041\003" +
    "\000\002\041\003\000\002\027\005\000\002\027\006\000" +
    "\002\030\005\000\002\063\002\000\002\030\006\000\002" +
    "\030\006\000\002\031\005\000\002\064\002\000\002\032" +
    "\006\000\002\065\002\000\002\032\010\000\002\045\003" +
    "\000\002\045\004\000\002\043\005\000\002\043\005\000" +
    "\002\043\005\000\002\044\011\000\002\044\010\000\002" +
    "\044\010\000\002\044\010\000\002\044\007\000\002\044" +
    "\006\000\002\033\005\000\002\033\004\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\004\000\002\035\004\000\002\035\004\000\002" +
    "\035\003\000\002\035\004\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\004\000\002\036\004" +
    "\000\002\036\004\000\002\036\004\000\002\036\004\000" +
    "\002\036\004\000\002\036\005\000\002\036\005\000\002" +
    "\037\003\000\002\037\003\000\002\037\004\000\002\037" +
    "\004\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\016\006\013\007\015\016\005\017\006\021" +
    "\014\023\010\001\002\000\004\002\u0105\001\002\000\006" +
    "\003\022\063\u0104\001\002\000\006\003\022\063\u0103\001" +
    "\002\000\016\002\ufffc\006\360\016\362\017\357\021\356" +
    "\023\010\001\002\000\004\063\347\001\002\000\016\006" +
    "\013\007\015\016\005\017\006\021\014\023\010\001\002" +
    "\000\004\002\uffff\001\002\000\006\003\022\063\337\001" +
    "\002\000\006\003\022\063\141\001\002\000\016\003\022" +
    "\006\025\016\016\017\017\021\026\063\024\001\002\000" +
    "\006\003\022\063\024\001\002\000\006\003\022\063\024" +
    "\001\002\000\004\036\uffeb\001\002\000\076\003\ufff6\004" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\012\ufff6\014\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\021\ufff6\023\ufff6\024\ufff6\031" +
    "\ufff6\033\ufff6\034\ufff6\036\ufff6\040\ufff6\051\ufff6\054\ufff6" +
    "\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071" +
    "\ufff6\072\ufff6\073\ufff6\001\002\000\004\036\135\001\002" +
    "\000\004\036\134\001\002\000\010\036\uffee\044\032\052" +
    "\uffed\001\002\000\006\003\022\063\024\001\002\000\006" +
    "\003\022\063\024\001\002\000\076\003\ufff3\004\ufff3\006" +
    "\ufff3\007\ufff3\010\ufff3\012\ufff3\014\ufff3\015\ufff3\016\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\023\ufff3\024\ufff3\031\ufff3\033" +
    "\ufff3\034\ufff3\036\ufff3\040\ufff3\051\ufff3\054\ufff3\063\ufff3" +
    "\064\ufff3\065\ufff3\066\ufff3\067\ufff3\070\ufff3\071\ufff3\072" +
    "\ufff3\073\ufff3\001\002\000\076\003\ufff2\004\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\012\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\023\ufff2\024\ufff2\031\ufff2\033\ufff2" +
    "\034\ufff2\036\ufff2\040\ufff2\051\ufff2\054\ufff2\063\ufff2\064" +
    "\ufff2\065\ufff2\066\ufff2\067\ufff2\070\ufff2\071\ufff2\072\ufff2" +
    "\073\ufff2\001\002\000\004\052\132\001\002\000\036\031" +
    "\037\034\041\040\046\051\043\054\047\063\051\064\036" +
    "\065\033\066\052\067\040\070\035\071\050\072\044\073" +
    "\034\001\002\000\050\027\uffa8\030\uffa8\031\uffa8\035\uffa8" +
    "\036\uffa8\041\uffa8\042\uffa8\043\uffa8\045\uffa8\046\uffa8\047" +
    "\uffa8\050\uffa8\053\uffa8\055\uffa8\056\uffa8\057\uffa8\060\uffa8" +
    "\061\uffa8\062\uffa8\001\002\000\050\027\uffa2\030\uffa2\031" +
    "\uffa2\035\uffa2\036\uffa2\041\uffa2\042\uffa2\043\uffa2\045\uffa2" +
    "\046\uffa2\047\uffa2\050\uffa2\053\uffa2\055\uffa2\056\uffa2\057" +
    "\uffa2\060\uffa2\061\uffa2\062\uffa2\001\002\000\050\027\uffa3" +
    "\030\uffa3\031\uffa3\035\uffa3\036\uffa3\041\uffa3\042\uffa3\043" +
    "\uffa3\045\uffa3\046\uffa3\047\uffa3\050\uffa3\053\uffa3\055\uffa3" +
    "\056\uffa3\057\uffa3\060\uffa3\061\uffa3\062\uffa3\001\002\000" +
    "\050\027\uffa9\030\uffa9\031\uffa9\035\uffa9\036\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\053" +
    "\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9" +
    "\001\002\000\036\031\037\034\041\040\046\051\043\054" +
    "\047\063\051\064\036\065\033\066\052\067\040\070\035" +
    "\071\050\072\044\073\034\001\002\000\050\027\uffa5\030" +
    "\uffa5\031\uffa5\035\uffa5\036\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\045\uffa5\046\uffa5\047\uffa5\050\uffa5\053\uffa5\055\uffa5\056" +
    "\uffa5\057\uffa5\060\uffa5\061\uffa5\062\uffa5\001\002\000\036" +
    "\031\037\034\041\040\046\051\043\054\047\063\051\064" +
    "\036\065\033\066\052\067\040\070\035\071\050\072\044" +
    "\073\034\001\002\000\050\027\116\030\122\031\107\035" +
    "\uffef\036\uffef\041\123\042\121\043\112\045\103\046\117" +
    "\047\115\050\105\053\124\055\110\056\120\057\113\060" +
    "\111\061\104\062\106\001\002\000\004\063\126\001\002" +
    "\000\050\027\uffa7\030\uffa7\031\uffa7\035\uffa7\036\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7" +
    "\053\uffa7\055\uffa7\056\uffa7\057\uffa7\060\uffa7\061\uffa7\062" +
    "\uffa7\001\002\000\050\027\uff70\030\uff70\031\uff70\035\uff70" +
    "\036\uff70\041\uff70\042\uff70\043\uff70\045\uff70\046\uff70\047" +
    "\uff70\050\uff70\053\uff70\055\uff70\056\uff70\057\uff70\060\uff70" +
    "\061\uff70\062\uff70\001\002\000\036\031\037\034\041\040" +
    "\046\051\043\054\047\063\051\064\036\065\033\066\052" +
    "\067\040\070\035\071\050\072\044\073\034\001\002\000" +
    "\004\063\101\001\002\000\050\027\uffa4\030\uffa4\031\uffa4" +
    "\035\uffa4\036\uffa4\041\uffa4\042\uffa4\043\uffa4\045\uffa4\046" +
    "\uffa4\047\uffa4\050\uffa4\053\uffa4\055\uffa4\056\uffa4\057\uffa4" +
    "\060\uffa4\061\uffa4\062\uffa4\001\002\000\056\027\uff71\030" +
    "\uff71\031\uff71\034\055\035\uff71\036\uff71\041\uff71\042\uff71" +
    "\043\uff71\045\uff71\046\uff71\047\uff71\050\uff71\051\056\053" +
    "\uff71\054\054\055\uff71\056\uff71\057\uff71\060\uff71\061\uff71" +
    "\062\uff71\001\002\000\050\027\uffa6\030\uffa6\031\uffa6\035" +
    "\uffa6\036\uffa6\041\uffa6\042\uffa6\043\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\050\uffa6\053\uffa6\055\uffa6\056\uffa6\057\uffa6\060" +
    "\uffa6\061\uffa6\062\uffa6\001\002\000\050\027\uff6f\030\uff6f" +
    "\031\uff6f\035\uff6f\036\uff6f\041\uff6f\042\uff6f\043\uff6f\045" +
    "\uff6f\046\uff6f\047\uff6f\050\uff6f\053\uff6f\055\uff6f\056\uff6f" +
    "\057\uff6f\060\uff6f\061\uff6f\062\uff6f\001\002\000\050\027" +
    "\uff6c\030\uff6c\031\uff6c\035\uff6c\036\uff6c\041\uff6c\042\uff6c" +
    "\043\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\053\uff6c\055" +
    "\uff6c\056\uff6c\057\uff6c\060\uff6c\061\uff6c\062\uff6c\001\002" +
    "\000\026\003\064\035\066\063\071\064\063\065\057\066" +
    "\073\070\061\071\070\072\065\073\060\001\002\000\050" +
    "\027\uff6b\030\uff6b\031\uff6b\035\uff6b\036\uff6b\041\uff6b\042" +
    "\uff6b\043\uff6b\045\uff6b\046\uff6b\047\uff6b\050\uff6b\053\uff6b" +
    "\055\uff6b\056\uff6b\057\uff6b\060\uff6b\061\uff6b\062\uff6b\001" +
    "\002\000\006\035\uff99\052\uff99\001\002\000\006\035\uff94" +
    "\052\uff94\001\002\000\006\035\uff96\052\uff96\001\002\000" +
    "\006\035\uff9d\052\077\001\002\000\006\035\uff9a\052\uff9a" +
    "\001\002\000\004\035\uff9f\001\002\000\006\035\uff97\052" +
    "\uff97\001\002\000\052\027\uffa0\030\uffa0\031\uffa0\035\uffa0" +
    "\036\uffa0\041\uffa0\042\uffa0\043\uffa0\045\uffa0\046\uffa0\047" +
    "\uffa0\050\uffa0\052\uffa0\053\uffa0\055\uffa0\056\uffa0\057\uffa0" +
    "\060\uffa0\061\uffa0\062\uffa0\001\002\000\004\035\074\001" +
    "\002\000\006\035\uff95\052\uff95\001\002\000\010\034\055" +
    "\035\uff9b\052\uff9b\001\002\000\006\035\uff93\052\uff93\001" +
    "\002\000\006\035\uff98\052\uff98\001\002\000\052\027\uffa1" +
    "\030\uffa1\031\uffa1\035\uffa1\036\uffa1\041\uffa1\042\uffa1\043" +
    "\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\052\uffa1\053\uffa1" +
    "\055\uffa1\056\uffa1\057\uffa1\060\uffa1\061\uffa1\062\uffa1\001" +
    "\002\000\004\035\076\001\002\000\052\027\uff9e\030\uff9e" +
    "\031\uff9e\035\uff9e\036\uff9e\041\uff9e\042\uff9e\043\uff9e\045" +
    "\uff9e\046\uff9e\047\uff9e\050\uff9e\052\uff9e\053\uff9e\055\uff9e" +
    "\056\uff9e\057\uff9e\060\uff9e\061\uff9e\062\uff9e\001\002\000" +
    "\022\063\071\064\063\065\057\066\073\070\061\071\070" +
    "\072\065\073\060\001\002\000\004\035\uff9c\001\002\000" +
    "\050\027\uff6e\030\uff6e\031\uff6e\035\uff6e\036\uff6e\041\uff6e" +
    "\042\uff6e\043\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\053" +
    "\uff6e\055\uff6e\056\uff6e\057\uff6e\060\uff6e\061\uff6e\062\uff6e" +
    "\001\002\000\050\027\uff6a\030\uff6a\031\uff6a\035\uff6a\036" +
    "\uff6a\041\uff6a\042\121\043\112\045\uff6a\046\uff6a\047\uff6a" +
    "\050\uff6a\053\124\055\uff6a\056\120\057\113\060\111\061" +
    "\uff6a\062\uff6a\001\002\000\036\031\uffc7\034\uffc7\040\uffc7" +
    "\051\uffc7\054\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\067" +
    "\uffc7\070\uffc7\071\uffc7\072\uffc7\073\uffc7\001\002\000\036" +
    "\031\uffbf\034\uffbf\040\uffbf\051\uffbf\054\uffbf\063\uffbf\064" +
    "\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\072\uffbf" +
    "\073\uffbf\001\002\000\036\031\uffc4\034\uffc4\040\uffc4\051" +
    "\uffc4\054\uffc4\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4" +
    "\070\uffc4\071\uffc4\072\uffc4\073\uffc4\001\002\000\036\031" +
    "\uffc3\034\uffc3\040\uffc3\051\uffc3\054\uffc3\063\uffc3\064\uffc3" +
    "\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073" +
    "\uffc3\001\002\000\036\031\uffbc\034\uffbc\040\uffbc\051\uffbc" +
    "\054\uffbc\063\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070" +
    "\uffbc\071\uffbc\072\uffbc\073\uffbc\001\002\000\036\031\uffc2" +
    "\034\uffc2\040\uffc2\051\uffc2\054\uffc2\063\uffc2\064\uffc2\065" +
    "\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073\uffc2" +
    "\001\002\000\036\031\uffc8\034\uffc8\040\uffc8\051\uffc8\054" +
    "\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8" +
    "\071\uffc8\072\uffc8\073\uffc8\001\002\000\036\031\uffb8\034" +
    "\uffb8\040\uffb8\051\uffb8\054\uffb8\063\uffb8\064\uffb8\065\uffb8" +
    "\066\uffb8\067\uffb8\070\uffb8\071\uffb8\072\uffb8\073\uffb8\001" +
    "\002\000\036\031\uffc0\034\uffc0\040\uffc0\051\uffc0\054\uffc0" +
    "\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071" +
    "\uffc0\072\uffc0\073\uffc0\001\002\000\036\031\037\034\041" +
    "\040\046\051\043\054\047\063\051\064\036\065\033\066" +
    "\052\067\040\070\035\071\050\072\044\073\034\001\002" +
    "\000\036\031\uffc5\034\uffc5\040\uffc5\051\uffc5\054\uffc5\063" +
    "\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5" +
    "\072\uffc5\073\uffc5\001\002\000\036\031\uffbb\034\uffbb\040" +
    "\uffbb\051\uffbb\054\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb" +
    "\067\uffbb\070\uffbb\071\uffbb\072\uffbb\073\uffbb\001\002\000" +
    "\036\031\uffc6\034\uffc6\040\uffc6\051\uffc6\054\uffc6\063\uffc6" +
    "\064\uffc6\065\uffc6\066\uffc6\067\uffc6\070\uffc6\071\uffc6\072" +
    "\uffc6\073\uffc6\001\002\000\036\031\uffc1\034\uffc1\040\uffc1" +
    "\051\uffc1\054\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067" +
    "\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\001\002\000\036" +
    "\031\uffb9\034\uffb9\040\uffb9\051\uffb9\054\uffb9\063\uffb9\064" +
    "\uffb9\065\uffb9\066\uffb9\067\uffb9\070\uffb9\071\uffb9\072\uffb9" +
    "\073\uffb9\001\002\000\036\031\uffba\034\uffba\040\uffba\051" +
    "\uffba\054\uffba\063\uffba\064\uffba\065\uffba\066\uffba\067\uffba" +
    "\070\uffba\071\uffba\072\uffba\073\uffba\001\002\000\036\031" +
    "\uffbd\034\uffbd\040\uffbd\051\uffbd\054\uffbd\063\uffbd\064\uffbd" +
    "\065\uffbd\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073" +
    "\uffbd\001\002\000\036\031\uffbe\034\uffbe\040\uffbe\051\uffbe" +
    "\054\uffbe\063\uffbe\064\uffbe\065\uffbe\066\uffbe\067\uffbe\070" +
    "\uffbe\071\uffbe\072\uffbe\073\uffbe\001\002\000\050\027\116" +
    "\030\122\031\107\035\uff67\036\uff67\041\123\042\121\043" +
    "\112\045\103\046\117\047\115\050\105\053\124\055\110" +
    "\056\120\057\113\060\111\061\104\062\106\001\002\000" +
    "\050\027\uff6d\030\uff6d\031\uff6d\035\uff6d\036\uff6d\041\uff6d" +
    "\042\uff6d\043\uff6d\045\uff6d\046\uff6d\047\uff6d\050\uff6d\053" +
    "\uff6d\055\uff6d\056\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d" +
    "\001\002\000\046\027\116\030\122\031\107\035\130\041" +
    "\123\042\121\043\112\045\103\046\117\047\115\050\105" +
    "\053\124\055\110\056\120\057\113\060\111\061\104\062" +
    "\106\001\002\000\050\027\uff68\030\uff68\031\uff68\035\uff68" +
    "\036\uff68\041\uff68\042\uff68\043\uff68\045\uff68\046\uff68\047" +
    "\uff68\050\uff68\053\uff68\055\uff68\056\uff68\057\uff68\060\uff68" +
    "\061\uff68\062\uff68\001\002\000\050\027\uff69\030\uff69\031" +
    "\uff69\035\uff69\036\uff69\041\uff69\042\121\043\112\045\uff69" +
    "\046\uff69\047\uff69\050\105\053\124\055\uff69\056\120\057" +
    "\113\060\111\061\104\062\uff69\001\002\000\004\063\024" +
    "\001\002\000\004\036\uffec\001\002\000\076\003\ufff1\004" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\014\ufff1\015\ufff1" +
    "\016\ufff1\017\ufff1\020\ufff1\021\ufff1\023\ufff1\024\ufff1\031" +
    "\ufff1\033\ufff1\034\ufff1\036\ufff1\040\ufff1\051\ufff1\054\ufff1" +
    "\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1\071" +
    "\ufff1\072\ufff1\073\ufff1\001\002\000\076\003\ufff0\004\ufff0" +
    "\006\ufff0\007\ufff0\010\ufff0\012\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\023\ufff0\024\ufff0\031\ufff0" +
    "\033\ufff0\034\ufff0\036\ufff0\040\ufff0\051\ufff0\054\ufff0\063" +
    "\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\071\ufff0" +
    "\072\ufff0\073\ufff0\001\002\000\076\003\ufff4\004\ufff4\006" +
    "\ufff4\007\ufff4\010\ufff4\012\ufff4\014\ufff4\015\ufff4\016\ufff4" +
    "\017\ufff4\020\ufff4\021\ufff4\023\ufff4\024\ufff4\031\ufff4\033" +
    "\ufff4\034\ufff4\036\ufff4\040\ufff4\051\ufff4\054\ufff4\063\ufff4" +
    "\064\ufff4\065\ufff4\066\ufff4\067\ufff4\070\ufff4\071\ufff4\072" +
    "\ufff4\073\ufff4\001\002\000\076\003\ufff5\004\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\017" +
    "\ufff5\020\ufff5\021\ufff5\023\ufff5\024\ufff5\031\ufff5\033\ufff5" +
    "\034\ufff5\036\ufff5\040\ufff5\051\ufff5\054\ufff5\063\ufff5\064" +
    "\ufff5\065\ufff5\066\ufff5\067\ufff5\070\ufff5\071\ufff5\072\ufff5" +
    "\073\ufff5\001\002\000\076\003\ufff8\004\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8\017\ufff8" +
    "\020\ufff8\021\ufff8\023\ufff8\024\ufff8\031\ufff8\033\ufff8\034" +
    "\ufff8\036\ufff8\040\ufff8\051\ufff8\054\ufff8\063\ufff8\064\ufff8" +
    "\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073" +
    "\ufff8\001\002\000\014\003\142\034\144\036\uffee\044\032" +
    "\052\uffed\001\002\000\004\032\uffdc\001\002\000\004\032" +
    "\uffe4\001\002\000\016\003\150\006\153\016\154\017\147" +
    "\021\145\035\146\001\002\000\004\063\164\001\002\000" +
    "\004\032\uffd6\001\002\000\004\063\163\001\002\000\004" +
    "\035\162\001\002\000\006\035\uffd3\052\160\001\002\000" +
    "\004\035\157\001\002\000\004\063\156\001\002\000\004" +
    "\063\155\001\002\000\006\035\uffd0\052\uffd0\001\002\000" +
    "\006\035\uffd1\052\uffd1\001\002\000\004\032\uffd5\001\002" +
    "\000\012\006\153\016\154\017\147\021\145\001\002\000" +
    "\004\035\uffd2\001\002\000\004\032\uffd4\001\002\000\006" +
    "\035\uffce\052\uffce\001\002\000\006\035\uffcf\052\uffcf\001" +
    "\002\000\004\032\167\001\002\000\016\002\uffe3\006\uffe3" +
    "\016\uffe3\017\uffe3\021\uffe3\023\uffe3\001\002\000\074\003" +
    "\205\004\210\006\171\007\015\010\172\012\222\014\175" +
    "\015\177\016\173\017\220\020\203\021\170\024\216\031" +
    "\037\033\200\034\041\036\212\040\046\051\043\054\047" +
    "\063\176\064\036\065\033\066\052\067\040\070\035\071" +
    "\050\072\044\073\034\001\002\000\006\003\022\063\024" +
    "\001\002\000\006\003\022\063\024\001\002\000\004\036" +
    "\uffb5\001\002\000\006\003\022\063\024\001\002\000\004" +
    "\036\332\001\002\000\006\003\271\034\272\001\002\000" +
    "\056\027\uff71\030\uff71\031\uff71\034\055\036\uff71\041\uff71" +
    "\042\uff71\043\uff71\044\032\045\uff71\046\uff71\047\uff71\050" +
    "\uff71\051\056\053\uff71\054\054\055\uff71\056\uff71\057\uff71" +
    "\060\uff71\061\uff71\062\uff71\001\002\000\006\003\263\034" +
    "\233\001\002\000\016\002\uffcd\006\uffcd\016\uffcd\017\uffcd" +
    "\021\uffcd\023\uffcd\001\002\000\062\003\205\004\210\010" +
    "\172\012\222\014\175\015\177\020\203\024\216\031\037" +
    "\033\uff65\034\041\036\212\040\046\051\043\054\047\063" +
    "\176\064\036\065\033\066\052\067\040\070\035\071\050" +
    "\072\044\073\034\001\002\000\062\003\uff79\004\uff79\010" +
    "\uff79\012\uff79\014\uff79\015\uff79\020\uff79\024\uff79\031\uff79" +
    "\033\uff79\034\uff79\036\uff79\040\uff79\051\uff79\054\uff79\063" +
    "\uff79\064\uff79\065\uff79\066\uff79\067\uff79\070\uff79\071\uff79" +
    "\072\uff79\073\uff79\001\002\000\004\036\uffb7\001\002\000" +
    "\062\003\205\004\210\010\172\012\222\014\175\015\177" +
    "\020\203\024\216\031\037\033\uffcb\034\041\036\212\040" +
    "\046\051\043\054\047\063\176\064\036\065\033\066\052" +
    "\067\040\070\035\071\050\072\044\073\034\001\002\000" +
    "\004\036\254\001\002\000\046\027\116\030\122\031\107" +
    "\036\253\041\123\042\121\043\112\045\103\046\117\047" +
    "\115\050\105\053\124\055\110\056\120\057\113\060\111" +
    "\061\104\062\106\001\002\000\074\003\ufffe\004\ufffe\006" +
    "\171\007\015\010\ufffe\012\ufffe\014\ufffe\015\ufffe\016\173" +
    "\017\220\020\ufffe\021\170\024\ufffe\031\ufffe\033\ufffe\034" +
    "\ufffe\036\ufffe\040\ufffe\051\ufffe\054\ufffe\063\ufffe\064\ufffe" +
    "\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe\073" +
    "\ufffe\001\002\000\004\036\uffb6\001\002\000\004\033\251" +
    "\001\002\000\062\003\uff73\004\uff73\010\uff73\012\uff73\014" +
    "\uff73\015\uff73\020\uff73\024\uff73\031\uff73\033\uff73\034\uff73" +
    "\036\uff73\040\uff73\051\uff73\054\uff73\063\uff73\064\uff73\065" +
    "\uff73\066\uff73\067\uff73\070\uff73\071\uff73\072\uff73\073\uff73" +
    "\001\002\000\062\003\uff78\004\uff78\010\uff78\012\uff78\014" +
    "\uff78\015\uff78\020\uff78\024\uff78\031\uff78\033\uff78\034\uff78" +
    "\036\uff78\040\uff78\051\uff78\054\uff78\063\uff78\064\uff78\065" +
    "\uff78\066\uff78\067\uff78\070\uff78\071\uff78\072\uff78\073\uff78" +
    "\001\002\000\064\003\uff7a\004\uff7a\010\uff7a\012\uff7a\013" +
    "\245\014\uff7a\015\uff7a\020\uff7a\024\uff7a\031\uff7a\033\uff7a" +
    "\034\uff7a\036\uff7a\040\uff7a\051\uff7a\054\uff7a\063\uff7a\064" +
    "\uff7a\065\uff7a\066\uff7a\067\uff7a\070\uff7a\071\uff7a\072\uff7a" +
    "\073\uff7a\001\002\000\062\003\uff77\004\uff77\010\uff77\012" +
    "\uff77\014\uff77\015\uff77\020\uff77\024\uff77\031\uff77\033\uff77" +
    "\034\uff77\036\uff77\040\uff77\051\uff77\054\uff77\063\uff77\064" +
    "\uff77\065\uff77\066\uff77\067\uff77\070\uff77\071\uff77\072\uff77" +
    "\073\uff77\001\002\000\004\034\uff8b\001\002\000\062\003" +
    "\205\004\210\010\172\012\222\014\175\015\177\020\203" +
    "\024\216\031\037\033\uff66\034\041\036\212\040\046\051" +
    "\043\054\047\063\176\064\036\065\033\066\052\067\040" +
    "\070\035\071\050\072\044\073\034\001\002\000\006\003" +
    "\022\063\024\001\002\000\004\036\237\001\002\000\004" +
    "\032\uff89\001\002\000\004\032\225\001\002\000\004\024" +
    "\231\001\002\000\062\003\205\004\210\010\172\012\222" +
    "\014\175\015\177\020\203\024\216\031\037\033\226\034" +
    "\041\036\212\040\046\051\043\054\047\063\176\064\036" +
    "\065\033\066\052\067\040\070\035\071\050\072\044\073" +
    "\034\001\002\000\064\003\uff7b\004\uff7b\010\uff7b\012\uff7b" +
    "\013\uff7b\014\uff7b\015\uff7b\020\uff7b\024\uff7b\031\uff7b\033" +
    "\uff7b\034\uff7b\036\uff7b\040\uff7b\051\uff7b\054\uff7b\063\uff7b" +
    "\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070\uff7b\071\uff7b\072" +
    "\uff7b\073\uff7b\001\002\000\004\033\230\001\002\000\064" +
    "\003\uff7c\004\uff7c\010\uff7c\012\uff7c\013\uff7c\014\uff7c\015" +
    "\uff7c\020\uff7c\024\uff7c\031\uff7c\033\uff7c\034\uff7c\036\uff7c" +
    "\040\uff7c\051\uff7c\054\uff7c\063\uff7c\064\uff7c\065\uff7c\066" +
    "\uff7c\067\uff7c\070\uff7c\071\uff7c\072\uff7c\073\uff7c\001\002" +
    "\000\004\034\233\001\002\000\004\036\236\001\002\000" +
    "\036\031\037\034\041\040\046\051\043\054\047\063\051" +
    "\064\036\065\033\066\052\067\040\070\035\071\050\072" +
    "\044\073\034\001\002\000\046\027\116\030\122\031\107" +
    "\035\235\041\123\042\121\043\112\045\103\046\117\047" +
    "\115\050\105\053\124\055\110\056\120\057\113\060\111" +
    "\061\104\062\106\001\002\000\010\003\uff8c\032\uff8c\036" +
    "\uff8c\001\002\000\062\003\uff88\004\uff88\010\uff88\012\uff88" +
    "\014\uff88\015\uff88\020\uff88\024\uff88\031\uff88\033\uff88\034" +
    "\uff88\036\uff88\040\uff88\051\uff88\054\uff88\063\uff88\064\uff88" +
    "\065\uff88\066\uff88\067\uff88\070\uff88\071\uff88\072\uff88\073" +
    "\uff88\001\002\000\062\003\uff76\004\uff76\010\uff76\012\uff76" +
    "\014\uff76\015\uff76\020\uff76\024\uff76\031\uff76\033\uff76\034" +
    "\uff76\036\uff76\040\uff76\051\uff76\054\uff76\063\uff76\064\uff76" +
    "\065\uff76\066\uff76\067\uff76\070\uff76\071\uff76\072\uff76\073" +
    "\uff76\001\002\000\076\003\ufff7\004\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\023\ufff7\024\ufff7\031\ufff7\033\ufff7\034\ufff7" +
    "\036\ufff7\040\ufff7\051\ufff7\054\ufff7\063\ufff7\064\ufff7\065" +
    "\ufff7\066\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7\073\ufff7" +
    "\001\002\000\004\033\uff64\001\002\000\004\034\233\001" +
    "\002\000\004\032\225\001\002\000\062\003\uff8a\004\uff8a" +
    "\010\uff8a\012\uff8a\014\uff8a\015\uff8a\020\uff8a\024\uff8a\031" +
    "\uff8a\033\uff8a\034\uff8a\036\uff8a\040\uff8a\051\uff8a\054\uff8a" +
    "\063\uff8a\064\uff8a\065\uff8a\066\uff8a\067\uff8a\070\uff8a\071" +
    "\uff8a\072\uff8a\073\uff8a\001\002\000\006\003\247\032\225" +
    "\001\002\000\062\003\uff92\004\uff92\010\uff92\012\uff92\014" +
    "\uff92\015\uff92\020\uff92\024\uff92\031\uff92\033\uff92\034\uff92" +
    "\036\uff92\040\uff92\051\uff92\054\uff92\063\uff92\064\uff92\065" +
    "\uff92\066\uff92\067\uff92\070\uff92\071\uff92\072\uff92\073\uff92" +
    "\001\002\000\004\033\250\001\002\000\062\003\uff91\004" +
    "\uff91\010\uff91\012\uff91\014\uff91\015\uff91\020\uff91\024\uff91" +
    "\031\uff91\033\uff91\034\uff91\036\uff91\040\uff91\051\uff91\054" +
    "\uff91\063\uff91\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91" +
    "\071\uff91\072\uff91\073\uff91\001\002\000\016\002\uffc9\006" +
    "\uffc9\016\uffc9\017\uffc9\021\uffc9\023\uffc9\001\002\000\062" +
    "\003\ufffd\004\ufffd\010\ufffd\012\ufffd\014\ufffd\015\ufffd\020" +
    "\ufffd\024\ufffd\031\ufffd\033\ufffd\034\ufffd\036\ufffd\040\ufffd" +
    "\051\ufffd\054\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067" +
    "\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\001\002\000\062" +
    "\003\uff75\004\uff75\010\uff75\012\uff75\014\uff75\015\uff75\020" +
    "\uff75\024\uff75\031\uff75\033\uff75\034\uff75\036\uff75\040\uff75" +
    "\051\uff75\054\uff75\063\uff75\064\uff75\065\uff75\066\uff75\067" +
    "\uff75\070\uff75\071\uff75\072\uff75\073\uff75\001\002\000\062" +
    "\003\uff72\004\uff72\010\uff72\012\uff72\014\uff72\015\uff72\020" +
    "\uff72\024\uff72\031\uff72\033\uff72\034\uff72\036\uff72\040\uff72" +
    "\051\uff72\054\uff72\063\uff72\064\uff72\065\uff72\066\uff72\067" +
    "\uff72\070\uff72\071\uff72\072\uff72\073\uff72\001\002\000\004" +
    "\033\260\001\002\000\004\033\257\001\002\000\016\002" +
    "\uffcc\006\uffcc\016\uffcc\017\uffcc\021\uffcc\023\uffcc\001\002" +
    "\000\016\002\uffca\006\uffca\016\uffca\017\uffca\021\uffca\023" +
    "\uffca\001\002\000\004\033\uff63\001\002\000\006\003\267" +
    "\032\225\001\002\000\004\032\uff8f\001\002\000\004\032" +
    "\225\001\002\000\064\003\uff8e\004\uff8e\010\uff8e\012\uff8e" +
    "\013\uff8e\014\uff8e\015\uff8e\020\uff8e\024\uff8e\031\uff8e\033" +
    "\uff8e\034\uff8e\036\uff8e\040\uff8e\051\uff8e\054\uff8e\063\uff8e" +
    "\064\uff8e\065\uff8e\066\uff8e\067\uff8e\070\uff8e\071\uff8e\072" +
    "\uff8e\073\uff8e\001\002\000\064\003\uff90\004\uff90\010\uff90" +
    "\012\uff90\013\uff90\014\uff90\015\uff90\020\uff90\024\uff90\031" +
    "\uff90\033\uff90\034\uff90\036\uff90\040\uff90\051\uff90\054\uff90" +
    "\063\uff90\064\uff90\065\uff90\066\uff90\067\uff90\070\uff90\071" +
    "\uff90\072\uff90\073\uff90\001\002\000\004\033\270\001\002" +
    "\000\064\003\uff8d\004\uff8d\010\uff8d\012\uff8d\013\uff8d\014" +
    "\uff8d\015\uff8d\020\uff8d\024\uff8d\031\uff8d\033\uff8d\034\uff8d" +
    "\036\uff8d\040\uff8d\051\uff8d\054\uff8d\063\uff8d\064\uff8d\065" +
    "\uff8d\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d" +
    "\001\002\000\006\032\225\033\331\001\002\000\050\006" +
    "\301\016\277\017\275\021\303\031\037\034\041\036\304" +
    "\040\046\051\043\054\047\063\051\064\036\065\033\066" +
    "\052\067\040\070\035\071\050\072\044\073\034\001\002" +
    "\000\004\032\225\001\002\000\062\003\uff85\004\uff85\010" +
    "\uff85\012\uff85\014\uff85\015\uff85\020\uff85\024\uff85\031\uff85" +
    "\033\uff85\034\uff85\036\uff85\040\uff85\051\uff85\054\uff85\063" +
    "\uff85\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85\071\uff85" +
    "\072\uff85\073\uff85\001\002\000\004\063\uff5f\001\002\000" +
    "\004\063\326\001\002\000\004\063\uff61\001\002\000\004" +
    "\036\315\001\002\000\004\063\uff60\001\002\000\050\027" +
    "\116\030\122\031\107\035\uff87\036\uff87\041\123\042\121" +
    "\043\112\045\103\046\117\047\115\050\105\053\124\055" +
    "\110\056\120\057\113\060\111\061\104\062\106\001\002" +
    "\000\004\063\uff62\001\002\000\050\006\301\016\277\017" +
    "\275\021\303\031\037\034\041\036\306\040\046\051\043" +
    "\054\047\063\051\064\036\065\033\066\052\067\040\070" +
    "\035\071\050\072\044\073\034\001\002\000\004\036\312" +
    "\001\002\000\040\031\037\034\041\035\310\040\046\051" +
    "\043\054\047\063\051\064\036\065\033\066\052\067\040" +
    "\070\035\071\050\072\044\073\034\001\002\000\046\027" +
    "\116\030\122\031\107\035\311\041\123\042\121\043\112" +
    "\045\103\046\117\047\115\050\105\053\124\055\110\056" +
    "\120\057\113\060\111\061\104\062\106\001\002\000\004" +
    "\032\uff7d\001\002\000\004\032\uff7e\001\002\000\046\006" +
    "\301\016\277\017\275\021\303\031\037\034\041\040\046" +
    "\051\043\054\047\063\051\064\036\065\033\066\052\067" +
    "\040\070\035\071\050\072\044\073\034\001\002\000\004" +
    "\035\314\001\002\000\004\032\uff81\001\002\000\050\006" +
    "\301\016\277\017\275\021\303\031\037\034\041\036\317" +
    "\040\046\051\043\054\047\063\051\064\036\065\033\066" +
    "\052\067\040\070\035\071\050\072\044\073\034\001\002" +
    "\000\004\036\322\001\002\000\046\006\301\016\277\017" +
    "\275\021\303\031\037\034\041\040\046\051\043\054\047" +
    "\063\051\064\036\065\033\066\052\067\040\070\035\071" +
    "\050\072\044\073\034\001\002\000\004\035\321\001\002" +
    "\000\004\032\uff80\001\002\000\040\031\037\034\041\035" +
    "\324\040\046\051\043\054\047\063\051\064\036\065\033" +
    "\066\052\067\040\070\035\071\050\072\044\073\034\001" +
    "\002\000\046\027\116\030\122\031\107\035\325\041\123" +
    "\042\121\043\112\045\103\046\117\047\115\050\105\053" +
    "\124\055\110\056\120\057\113\060\111\061\104\062\106" +
    "\001\002\000\004\032\uff7f\001\002\000\004\032\uff82\001" +
    "\002\000\004\044\032\001\002\000\006\035\uff86\036\uff86" +
    "\001\002\000\062\003\uff84\004\uff84\010\uff84\012\uff84\014" +
    "\uff84\015\uff84\020\uff84\024\uff84\031\uff84\033\uff84\034\uff84" +
    "\036\uff84\040\uff84\051\uff84\054\uff84\063\uff84\064\uff84\065" +
    "\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84\073\uff84" +
    "\001\002\000\062\003\uff83\004\uff83\010\uff83\012\uff83\014" +
    "\uff83\015\uff83\020\uff83\024\uff83\031\uff83\033\uff83\034\uff83" +
    "\036\uff83\040\uff83\051\uff83\054\uff83\063\uff83\064\uff83\065" +
    "\uff83\066\uff83\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83" +
    "\001\002\000\062\003\uff74\004\uff74\010\uff74\012\uff74\014" +
    "\uff74\015\uff74\020\uff74\024\uff74\031\uff74\033\uff74\034\uff74" +
    "\036\uff74\040\uff74\051\uff74\054\uff74\063\uff74\064\uff74\065" +
    "\uff74\066\uff74\067\uff74\070\uff74\071\uff74\072\uff74\073\uff74" +
    "\001\002\000\076\003\ufffa\004\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\012\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\023\ufffa\024\ufffa\031\ufffa\033\ufffa\034\ufffa\036" +
    "\ufffa\040\ufffa\051\ufffa\054\ufffa\063\ufffa\064\ufffa\065\ufffa" +
    "\066\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\001" +
    "\002\000\076\003\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\012\ufff9\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\023\ufff9\024\ufff9\031\ufff9\033\ufff9\034\ufff9\036\ufff9" +
    "\040\ufff9\051\ufff9\054\ufff9\063\ufff9\064\ufff9\065\ufff9\066" +
    "\ufff9\067\ufff9\070\ufff9\071\ufff9\072\ufff9\073\ufff9\001\002" +
    "\000\004\032\167\001\002\000\016\002\uffdb\006\uffdb\016" +
    "\uffdb\017\uffdb\021\uffdb\023\uffdb\001\002\000\014\003\340" +
    "\034\144\036\uffee\044\032\052\uffed\001\002\000\004\032" +
    "\uffde\001\002\000\004\032\uffe8\001\002\000\004\032\167" +
    "\001\002\000\016\002\uffe7\006\uffe7\016\uffe7\017\uffe7\021" +
    "\uffe7\023\uffe7\001\002\000\004\032\167\001\002\000\016" +
    "\002\uffdd\006\uffdd\016\uffdd\017\uffdd\021\uffdd\023\uffdd\001" +
    "\002\000\004\002\000\001\002\000\006\003\350\034\144" +
    "\001\002\000\004\032\uffd8\001\002\000\004\032\uffe2\001" +
    "\002\000\004\032\167\001\002\000\016\002\uffe1\006\uffe1" +
    "\016\uffe1\017\uffe1\021\uffe1\023\uffe1\001\002\000\004\032" +
    "\167\001\002\000\016\002\uffd7\006\uffd7\016\uffd7\017\uffd7" +
    "\021\uffd7\023\uffd7\001\002\000\004\063\u0102\001\002\000" +
    "\004\063\373\001\002\000\004\063\372\001\002\000\004" +
    "\002\ufffb\001\002\000\004\063\363\001\002\000\006\003" +
    "\364\034\144\001\002\000\004\032\uffe0\001\002\000\004" +
    "\032\uffea\001\002\000\004\032\167\001\002\000\016\002" +
    "\uffe9\006\uffe9\016\uffe9\017\uffe9\021\uffe9\023\uffe9\001\002" +
    "\000\004\032\167\001\002\000\016\002\uffdf\006\uffdf\016" +
    "\uffdf\017\uffdf\021\uffdf\023\uffdf\001\002\000\006\003\340" +
    "\034\144\001\002\000\006\003\374\034\144\001\002\000" +
    "\004\032\uffda\001\002\000\004\032\uffe6\001\002\000\004" +
    "\032\167\001\002\000\016\002\uffe5\006\uffe5\016\uffe5\017" +
    "\uffe5\021\uffe5\023\uffe5\001\002\000\004\032\167\001\002" +
    "\000\016\002\uffd9\006\uffd9\016\uffd9\017\uffd9\021\uffd9\023" +
    "\uffd9\001\002\000\006\003\142\034\144\001\002\000\014" +
    "\003\374\034\144\036\uffee\044\032\052\uffed\001\002\000" +
    "\014\003\364\034\144\036\uffee\044\032\052\uffed\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\012\002\003\004\011\005\010\011\006\001" +
    "\001\000\002\001\001\000\010\006\332\007\017\010\022" +
    "\001\001\000\010\006\237\007\017\010\022\001\001\000" +
    "\006\004\360\011\006\001\001\000\002\001\001\000\012" +
    "\002\345\004\011\005\010\011\006\001\001\000\002\001" +
    "\001\000\010\006\333\007\017\010\022\001\001\000\010" +
    "\006\137\007\017\010\022\001\001\000\010\006\020\007" +
    "\017\010\022\001\001\000\010\006\136\007\017\010\022" +
    "\001\001\000\010\006\135\007\017\010\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\030\001\001\000\010\006\027\007" +
    "\017\010\022\001\001\000\010\006\026\007\017\010\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\044\025\052\036\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\044\025\052\036\130\001\001\000\002" +
    "\001\001\000\010\024\044\025\052\036\126\001\001\000" +
    "\004\016\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\024\044\025\052\036\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\071\026\066\041\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\071\026\077\041\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\024\044" +
    "\025\052\036\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\113\001\001\000\002\001\001\000\004\016\113" +
    "\001\001\000\002\001\001\000\004\016\113\001\001\000" +
    "\006\007\017\010\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\142\046\030\001\001" +
    "\000\004\056\334\001\001\000\004\052\164\001\001\000" +
    "\006\013\151\014\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\160\014\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\165\001\001\000\002\001\001\000\036\003\203\005\206" +
    "\007\220\017\173\024\044\025\052\027\201\030\213\032" +
    "\212\034\200\035\216\036\205\037\210\043\214\001\001" +
    "\000\010\006\137\007\017\010\022\001\001\000\010\006" +
    "\333\007\017\010\022\001\001\000\002\001\001\000\010" +
    "\006\332\007\017\010\022\001\001\000\002\001\001\000" +
    "\004\044\272\001\001\000\002\001\001\000\004\031\261" +
    "\001\001\000\002\001\001\000\032\007\220\017\173\024" +
    "\044\025\052\027\201\030\213\032\212\034\200\035\216" +
    "\036\205\037\260\043\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\007\220\017\173\024\044\025\052" +
    "\027\201\030\213\032\212\034\200\035\216\036\205\037" +
    "\255\043\214\061\254\001\001\000\002\001\001\000\004" +
    "\016\113\001\001\000\006\003\251\005\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\064" +
    "\241\001\001\000\032\007\220\017\173\024\044\025\052" +
    "\027\201\030\213\032\212\034\200\035\216\036\205\037" +
    "\240\043\214\001\001\000\010\006\237\007\017\010\022" +
    "\001\001\000\002\001\001\000\004\065\222\001\001\000" +
    "\004\033\223\001\001\000\002\001\001\000\032\007\220" +
    "\017\173\024\044\025\052\027\201\030\213\032\212\034" +
    "\200\035\216\036\205\037\226\043\214\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\231\001\001\000\002\001\001\000\010\024\044\025\052" +
    "\036\233\001\001\000\004\016\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\242\001\001\000\004\033" +
    "\243\001\001\000\002\001\001\000\004\033\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\265" +
    "\001\001\000\004\063\263\001\001\000\004\033\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\327\001\001\000\014\024" +
    "\044\025\052\036\301\040\275\045\277\001\001\000\004" +
    "\033\273\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\326\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\113\001\001\000\002\001" +
    "\001\000\014\024\044\025\052\036\301\040\275\045\304" +
    "\001\001\000\002\001\001\000\010\024\044\025\052\036" +
    "\306\001\001\000\004\016\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\024\044\025\052\036\301\040" +
    "\275\045\312\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\024\044\025\052\036\301\040\275\045\315\001" +
    "\001\000\002\001\001\000\014\024\044\025\052\036\301" +
    "\040\275\045\317\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\024\044\025\052\036\322\001\001\000\004" +
    "\016\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\335\001\001\000\002\001\001\000\006" +
    "\012\340\046\030\001\001\000\004\055\343\001\001\000" +
    "\004\050\341\001\001\000\004\015\342\001\001\000\002" +
    "\001\001\000\004\015\344\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\350\001\001\000\004\060\353" +
    "\001\001\000\004\053\351\001\001\000\004\015\352\001" +
    "\001\000\002\001\001\000\004\015\354\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\364" +
    "\001\001\000\004\054\367\001\001\000\004\047\365\001" +
    "\001\000\004\015\366\001\001\000\002\001\001\000\004" +
    "\015\370\001\001\000\002\001\001\000\004\012\340\001" +
    "\001\000\004\012\374\001\001\000\004\057\377\001\001" +
    "\000\004\051\375\001\001\000\004\015\376\001\001\000" +
    "\002\001\001\000\004\015\u0100\001\001\000\002\001\001" +
    "\000\004\012\142\001\001\000\006\012\374\046\030\001" +
    "\001\000\006\012\364\046\030\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private ArrayList<Error_Sintactico> lista_Sintacticos = new ArrayList(); //lista de errores sintacticos
    private ArrayList<Error_Semantico> lista_Semanticos = new ArrayList(); //lista de errores semanticos
    private Tabla_Simbolos ts = new Tabla_Simbolos(); //tabla de simbolos
    public ArrayList<Simbolo> multiplesDeclaraciones = new ArrayList(); //aqui se guardan los identificadores en caso de una multiple declaración
    public ArrayList<Simbolo> listaP = new ArrayList(); //es la lista de parametros de definción de una función
    public ArrayList<Simbolo> listaPa = new ArrayList(); //es la lista de parametros cuando se llama una funcion
    
    public int loop = 0; //saber si el continue y el break están dentro de un bucle
    public String scope = "global"; //define el scope de la variables
    public String funcionActual = ""; //me dice cual es la función actual
    public String tipoActual = ""; //cual es el tipo actual en caso de multiplesdeclaraciones
    public Boolean multiples = false; //saber so hay multiples declaraciones
    public Boolean redefinicion = false;
    

    /* Errores sintacticos*/
    public void agregarError(String mensaje,String lexema, int fila, int columna){
        Error_Sintactico e = new Error_Sintactico(lexema,fila,columna,mensaje);
        lista_Sintacticos.add(e);
    }

    public void agregarError(String mensaje){
        System.out.println("Entre a error");
        int ultimo = lista_Sintacticos.size();
        lista_Sintacticos.get(ultimo-1).setDescripcion(mensaje);
    }

    public Tabla_Simbolos getTS(){
        return this.ts;
    }   

    public ArrayList getListaSemanticos(){
        return this.lista_Semanticos;
    }

    public ArrayList<Error_Sintactico> getLista_Errores(){
        return this.lista_Sintacticos;
    }

    // La recuperacion es posible
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        Error_Sintactico e = new Error_Sintactico(lexema,fila,columna,"Error inesperado, revise la sintaxis");
        lista_Sintacticos.add(e);

        System.out.println("!!!!!!! Error de sintaxis, revise la llaves !!!!!!!");
        System.out.println("\t\tLexema: "+lexema + " :" + fila);      
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

       
        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {


    /* Verifica si hay loops en una parte especifica de la gramatica */
    public void verificarLoop(String id, int lin, int col){
        if(loop==0){
            Error_Semantico e = new Error_Semantico(id,lin,col+1,"Sentencia " + id + " no es valida sin loop");
            lista_Semanticos.add(e); 
        }
    }

    /* Verifica el llamado a una función */ 
    public void verificarCall(String id, int lin, int col){
        Simbolo fun = new Simbolo("Funcion","","no-define",id,listaPa,lin,col+1);
        String respuesta = ts.buscarDefinicionFuncion(fun);
        if(!respuesta.equals("Valido")){ //valido significa que la llamada es correcta
            Error_Semantico e = new Error_Semantico("Call to: " + fun.getNombre(),fun.getLinea(),fun.getColumna(),respuesta);
            lista_Semanticos.add(e);
        }
        listaPa = new ArrayList();
        
    }
    
    /* Analiza si una variable ha sido declarada o no*/
    public void analizarIdentificador(String s, int lin, int col){
        Simbolo var = new Simbolo("Variable",scope,"no-define",s,lin,col+1);
        if(!ts.buscarDefinicionVariable(var)){
            Error_Semantico e = new Error_Semantico(var.getNombre(),var.getLinea(),var.getColumna(),"Variable no definida");
            lista_Semanticos.add(e);
        }
        
    }
    
    /*Controla cada vez que se sale o se entra en un loop*/
    public void loop(int i){
        if(i==1){
            loop = loop +1;
        }else{
            loop = loop -1;
        }
    }   
    
    /*Asigna la función actual */
    public void nFuncion(String s){
        parser.funcionActual = s;
    }

    public void nScope(String s){  //definir un nuevo scope
        parser.scope = s;
    }

    public void nTipo(String t){ //definir un nuevo tipo de variable o funcion 
        parser.tipoActual = t;
    }

    public void mD(){   //saber si estoy definiendo multiples variables
        parser.multiples = true;
    }

    /* Define nuevos parametros cuando se esta definiendo una función*/
    public void nPara(String tipo, String nombre, int lin, int col){
        Simbolo p = new Simbolo("Variable",scope,tipo,nombre, lin,col+1);
        listaP.add(p);
    }

    /*Agregar una función a la ts, pero primero se hace una verificación de que la información se correcta*/
    public void aFun(String tipo, String nombre, int lin, int col){
        redefinicion = false;
        parser.scope = nombre;
        Simbolo fun = new Simbolo("Funcion","",tipo,nombre,listaP, lin, col+1);
        if(!ts.buscarDeclaracion(fun)){
            System.out.println(fun.getNombre());
            ts.agregarSimbolo(fun);
            for(Simbolo var:fun.getParametros()){
                var.setScope(nombre);
                if(!ts.buscarDeclaracion(var)){ //sino esta en la tabla de simbolos lo inserta
                   ts.agregarSimbolo(var);
                }else{
                    Error_Semantico e = new Error_Semantico(var.getNombre(),var.getLinea(),var.getColumna(),"Redefinición de variable");
                    lista_Semanticos.add(e);
                }   
            }   
        }else{
            Error_Semantico e = new Error_Semantico(fun.getNombre(),fun.getLinea(),fun.getColumna(),"Redefinición de función");
            lista_Semanticos.add(e);
            parser.scope = "1";
            redefinicion = true;
        }
        listaP = new ArrayList();
    }

    public void aDec(){ //agregar multiples variables
        if(parser.multiples){
            if(!redefinicion){
                for(Simbolo var:multiplesDeclaraciones){
                    var.setTipo(tipoActual);
                    if(!ts.buscarDeclaracion(var)){ //sino esta en la tabla de simbolos lo inserta
                        ts.agregarSimbolo(var);
                    }else{
                        Error_Semantico e = new Error_Semantico(var.getNombre(),var.getLinea(),var.getColumna(),"Redefinición de variable");
                        lista_Semanticos.add(e);
                    }   
                }
            }
            parser.multiples = false;
            tipoActual = "";
            multiplesDeclaraciones.clear();
        }else{
            if(!redefinicion){
                Simbolo var = parser.multiplesDeclaraciones.get(0);
                var.setTipo(tipoActual);
                if(!ts.buscarDeclaracion(var)){ // sino esta en la table de simbolos lo inserta
                    ts.agregarSimbolo(var);
                }else{
                    Error_Semantico e = new Error_Semantico(var.getNombre(),var.getLinea(),var.getColumna(),"Redefinición de variable");
                    lista_Semanticos.add(e);
                }
            }
            tipoActual = "";
            multiplesDeclaraciones.clear();
        }
    }

    /*En caso de multiples declaraciones va agregando a una lista temporales las variables a revisar */
    public void aMult(String id, int lin, int col){
        Simbolo var = new Simbolo("Variable",scope,"",id,lin,col+1);
        multiplesDeclaraciones.add(var);
    }
    
    /*Guarda los parametros cuando se llama a una funcion*/
    public void aPcall(String tipo,String id, int lin, int col){
        Simbolo pa = new Simbolo(tipo,"","",id,lin,col);
        listaPa.add(pa);
    }

  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= declaracionVariable programa 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= listaFunciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listaDeclaraciones ::= declaracionVariable 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // listaDeclaraciones ::= declaracionVariable listaDeclaraciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaDeclaraciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // listaFunciones ::= funcion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaFunciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // listaFunciones ::= funcion listaFunciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("listaFunciones",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracionVariable ::= INT tDeclaracion 
            {
              Object RESULT =null;
		nTipo("int");aDec();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracionVariable ::= CHAR tDeclaracion 
            {
              Object RESULT =null;
		nTipo("char");aDec();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracionVariable ::= SHORT tDeclaracion 
            {
              Object RESULT =null;
		nTipo("short");aDec();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracionVariable ::= LONG tDeclaracion 
            {
              Object RESULT =null;
		nTipo("long");aDec();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracionVariable ::= CONST tDeclaracion 
            {
              Object RESULT =null;
		nTipo("const");aDec();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracionVariable ::= CONST INT tDeclaracion 
            {
              Object RESULT =null;
		nTipo("const-int");aDec();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracionVariable ::= CONST LONG tDeclaracion 
            {
              Object RESULT =null;
		nTipo("const-long");aDec();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracionVariable ::= CONST SHORT tDeclaracion 
            {
              Object RESULT =null;
		nTipo("const-short");aDec();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracionVariable ::= CONST CHAR tDeclaracion 
            {
              Object RESULT =null;
		nTipo("const-char");aDec();
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("declaracionVariable",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tDeclaracion ::= multipleDeclaracion PCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDeclaracion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tDeclaracion ::= error PCOMA 
            {
              Object RESULT =null;
		parser.agregarError("Error en la declaración");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tDeclaracion",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // asignacion ::= IDENTIFICADOR IG expresion 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		aMult(id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // multipleDeclaracion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		aMult(id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("multipleDeclaracion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
mD();aMult(id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",36, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // multipleDeclaracion ::= IDENTIFICADOR NT$0 COMA multipleDeclaracion 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		System.out.println("por aqui");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("multipleDeclaracion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // multipleDeclaracion ::= asignacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("multipleDeclaracion",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
aFun("int",id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",37, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funcion ::= INT IDENTIFICADOR funcionDeclaracion NT$1 cuerpoFun 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
aFun("char",id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",38, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funcion ::= CHAR IDENTIFICADOR funcionDeclaracion NT$2 cuerpoFun 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
aFun("long",id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",39, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funcion ::= LONG IDENTIFICADOR funcionDeclaracion NT$3 cuerpoFun 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
aFun("short",id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",40, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funcion ::= SHORT IDENTIFICADOR funcionDeclaracion NT$4 cuerpoFun 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$5 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
aFun("void",id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",41, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funcion ::= VOID IDENTIFICADOR funcionDeclaracion NT$5 cuerpoFun 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$6 ::= 
            {
              Object RESULT =null;
parser.agregarError("Error en la declaración de la función");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",42, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // funcion ::= INT IDENTIFICADOR error NT$6 cuerpoFun 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$7 ::= 
            {
              Object RESULT =null;
parser.agregarError("Error en la declaración de la función");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",43, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // funcion ::= CHAR IDENTIFICADOR error NT$7 cuerpoFun 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$8 ::= 
            {
              Object RESULT =null;
parser.agregarError("Error en la declaración de la función");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",44, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // funcion ::= SHORT IDENTIFICADOR error NT$8 cuerpoFun 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$9 ::= 
            {
              Object RESULT =null;
parser.agregarError("Error en la declaración de la función");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",45, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funcion ::= LONG IDENTIFICADOR error NT$9 cuerpoFun 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$10 ::= 
            {
              Object RESULT =null;
parser.agregarError("Error en la declaración de la función");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",46, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcion ::= VOID IDENTIFICADOR error NT$10 cuerpoFun 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcion",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // funcionDeclaracion ::= PARI PARD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionDeclaracion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // funcionDeclaracion ::= PARI parametroDefinicion PARD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionDeclaracion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // funcionDeclaracion ::= PARI error PARD 
            {
              Object RESULT =null;
		agregarError("Error en los parametros de la función");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("funcionDeclaracion",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametroDefinicion ::= parametro 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametroDefinicion",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametroDefinicion ::= parametro COMA parametroDefinicion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametroDefinicion",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametro ::= CHAR IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		nPara("char",id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametro ::= INT IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		nPara("int",id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametro ::= SHORT IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		nPara("short",id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametro ::= LONG IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		nPara("long",id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("parametro",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cuerpoFun ::= LLAI LLAD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoFun",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // cuerpoFun ::= LLAI listaDeclaraciones cuerpo LLAD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoFun",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$11 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
agregarError("Se esperaba un cuerpo","",eright,eleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",47, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // cuerpoFun ::= LLAI listaDeclaraciones NT$11 LLAD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoFun",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // cuerpoFun ::= LLAI cuerpo LLAD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoFun",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operador ::= IGIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // operador ::= MOD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // operador ::= DIVIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // operador ::= MULIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // operador ::= OR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operador ::= MENIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operador ::= MASIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operador ::= MAYIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operador ::= MENOIG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operador ::= AND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // operador ::= DIF 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // operador ::= MAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // operador ::= MEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // operador ::= DIV 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operador ::= MUL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operador ::= MAY 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operador ::= MENO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operador",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // jump ::= RETURN 
            {
              Object RESULT =null;
		
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("jump",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // jump ::= BREAK 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		verificarLoop(id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("jump",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // jump ::= CONTINUE 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		verificarLoop(id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("jump",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // literalNumerica ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literalNumerica",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literalNumerica ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literalNumerica",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literalNumerica ::= OCTAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literalNumerica",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literalNumerica ::= HEXA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literalNumerica",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literalNumerica ::= CIENTIFICO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literalNumerica",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // literalCaracter ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literalCaracter",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // literalCaracter ::= CARACTERN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literalCaracter",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unario ::= MASMAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("unario",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // unario ::= MENMEN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("unario",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sufijo ::= unario IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sufijo",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // postfijo ::= IDENTIFICADOR unario 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("postfijo",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // literal ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // literal ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // literal ::= HEXA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // literal ::= OCTAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // literal ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // literal ::= CARACTER 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // literal ::= CIENTIFICO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // literal ::= CARACTERN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("literal",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // call ::= IDENTIFICADOR PARI callPara PARD 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		verificarCall(id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("call",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // call ::= IDENTIFICADOR PARI PARD 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		verificarCall(id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("call",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$12 ::= 
            {
              Object RESULT =null;
parser.agregarError("Error en la llamada a función");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$12",48, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // call ::= IDENTIFICADOR PARI error NT$12 PARD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("call",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // callPara ::= expresionPara 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("callPara",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // callPara ::= expresionPara COMA callPara 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("callPara",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expresionPara ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		aPcall("Variable",id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresionPara",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expresionPara ::= ENTERO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		aPcall("Numero",id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresionPara",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expresionPara ::= DECIMAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		aPcall("Numero",id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresionPara",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expresionPara ::= OCTAL 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		aPcall("Numero",id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresionPara",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // expresionPara ::= HEXA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		aPcall("Numero",id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresionPara",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // expresionPara ::= CIENTIFICO 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		aPcall("Numero",id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresionPara",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // expresionPara ::= CARACTER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		aPcall("Char",id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresionPara",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // expresionPara ::= CARACTERN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		aPcall("Char",id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresionPara",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // expresionPara ::= call 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresionPara",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ifElse ::= if ELSE cuerpoControl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifElse",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ifElse ::= if ELSE error LLAD 
            {
              Object RESULT =null;
		agregarError("Error en la estructura del if-else");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ifElse",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // if ::= IF baseComun cuerpoControl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$13 ::= 
            {
              Object RESULT =null;
agregarError("Error en la condición del if");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$13",49, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // if ::= IF error NT$13 cuerpoControl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // if ::= IF baseComun error LLAD 
            {
              Object RESULT =null;
		agregarError("Error en la estructura del if");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("if",22, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // baseComun ::= PARI expresion PARD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("baseComun",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$14 ::= 
            {
              Object RESULT =null;
loop(1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$14",50, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // while ::= WHILE NT$14 baseComun cuerpoControl 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		loop(0);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("while",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$15 ::= 
            {
              Object RESULT =null;
loop(1);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$15",51, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // while ::= DO NT$15 cuerpoControl WHILE baseComun PCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		loop(0);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("while",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expFor ::= expresion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expFor",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expFor ::= tipo asignacion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expFor",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // for ::= FOR condicionFor cuerpoControl 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // for ::= FOR error cuerpoControl 
            {
              Object RESULT =null;
		agregarError("Error en la condición del for");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // for ::= FOR error LLAD 
            {
              Object RESULT =null;
		agregarError("Error en la estructura del for");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("for",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // condicionFor ::= PARI expFor PCOMA expFor PCOMA expresion PARD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionFor",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // condicionFor ::= PARI PCOMA expFor PCOMA expFor PARD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionFor",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // condicionFor ::= PARI expFor PCOMA PCOMA expFor PARD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionFor",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // condicionFor ::= PARI expFor PCOMA expFor PCOMA PARD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionFor",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // condicionFor ::= PARI PCOMA PCOMA expresion PARD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionFor",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // condicionFor ::= PARI PCOMA PCOMA PARD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("condicionFor",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // cuerpoControl ::= LLAI cuerpo LLAD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoControl",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // cuerpoControl ::= LLAI LLAD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpoControl",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // control ::= if 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("control",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // control ::= ifElse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("control",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // control ::= while 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("control",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // control ::= for 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("control",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // sentencia ::= asignacion PCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // sentencia ::= expresion PCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // sentencia ::= jump PCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // sentencia ::= PCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // sentencia ::= error PCOMA 
            {
              Object RESULT =null;
		agregarError("Error en la sentencia");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expresion ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		analizarIdentificador(id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expresion ::= literal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expresion ::= call 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expresion ::= MASMAS IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		analizarIdentificador(id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expresion ::= MENMEN IDENTIFICADOR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		analizarIdentificador(id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expresion ::= IDENTIFICADOR MASMAS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		analizarIdentificador(id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expresion ::= IDENTIFICADOR MENMEN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		analizarIdentificador(id.toString(),idright,idleft);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expresion ::= NOT expresion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // expresion ::= MEN expresion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // expresion ::= PARI expresion PARD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // expresion ::= expresion operador expresion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("expresion",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // cuerpo ::= sentencia 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // cuerpo ::= control 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // cuerpo ::= sentencia cuerpo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // cuerpo ::= control cuerpo 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // tipo ::= SHORT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // tipo ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // tipo ::= LONG 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("tipo",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
